<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Maxence Collard-Lagalle</title><link>https://maxence.collard-lagalle.me/</link><description>Recent content on Maxence Collard-Lagalle</description><generator>Hugo -- gohugo.io</generator><language>fr</language><lastBuildDate>Tue, 14 May 2024 18:00:00 +0100</lastBuildDate><atom:link href="https://maxence.collard-lagalle.me/index.xml" rel="self" type="application/rss+xml"/><item><title>Tableaux et formulaires en HTML 5</title><link>https://maxence.collard-lagalle.me/posts/formations/html-css/html-tables-forms/</link><pubDate>Tue, 14 May 2024 18:00:00 +0100</pubDate><guid>https://maxence.collard-lagalle.me/posts/formations/html-css/html-tables-forms/</guid><description>&lt;h2 id="tableaux">Tableaux&lt;/h2>
&lt;p>En HTML 5, un tableau de données est un élément de type bloc, représenté par une balise &lt;code>&amp;lt;table&amp;gt;&lt;/code>.
Selon le degré de complexité du tableau, plusieurs autres balises sont à utiliser à l&amp;rsquo;intérieur de cet élément.&lt;/p>
&lt;p>Historiquement, les tableaux étaient également utilisés pour faire de la mise en page, mais cette pratique est très fortement déconseillée depuis, compte tenu des possibilités offertes par CSS.&lt;/p>
&lt;h3 id="tableau-simple">Tableau simple&lt;/h3>
&lt;p>Pour réaliser un tableau simple, chaque ligne du tableau est décrite par un élément &lt;code>&amp;lt;tr&amp;gt;&lt;/code> (&lt;em>table row&lt;/em>).
Ces éléments contiennent à leur tour deux types d&amp;rsquo;éléments : &lt;code>&amp;lt;th&amp;gt;&lt;/code> (&lt;em>table head&lt;/em>) pour les cellules d&amp;rsquo;en-tête, et &lt;code>&amp;lt;td&amp;gt;&lt;/code> (&lt;em>table data&lt;/em>) pour les cellules de données.&lt;/p></description></item><item><title>Positionnement des éléments en CSS</title><link>https://maxence.collard-lagalle.me/posts/formations/html-css/css-positioning/</link><pubDate>Mon, 13 May 2024 12:00:00 +0100</pubDate><guid>https://maxence.collard-lagalle.me/posts/formations/html-css/css-positioning/</guid><description>&lt;h2 id="flux-de-positionnement">Flux de positionnement&lt;/h2>
&lt;h3 id="positionnement-dans-le-flux">Positionnement dans le flux&lt;/h3>
&lt;p>Par défaut, le positionnement des objets s&amp;rsquo;effectue de manière dite statique, ou dans le flux.
Cela implique que :&lt;/p>
&lt;ul>
&lt;li>les éléments en ligne s&amp;rsquo;enchaînent à la suite, autant que possible sur la même ligne.&lt;/li>
&lt;li>les éléments de type bloc se positionnent les uns en dessous des autres, les marges externes supérieures et inférieures étant fusionnées.&lt;/li>
&lt;/ul>
&lt;p>Par défaut, les éléments ont pour hauteur celle de tous les éléments dans le flux qu&amp;rsquo;ils contiennent, et 0 si ils sont vides ou ne contiennent que des éléments hors du flux.
La largeur par défaut des élements dépend de leur type : pour les éléments de type bloc, il s&amp;rsquo;agit de celle de le élément parent, alors que pour les éléments en ligne, il s&amp;rsquo;agit de celle de leur contenu.&lt;/p></description></item><item><title>Syntaxe CSS 3, sélecteurs et propriétés usuelles</title><link>https://maxence.collard-lagalle.me/posts/formations/html-css/css-syntax-selectors-props/</link><pubDate>Sun, 12 May 2024 21:00:00 +0100</pubDate><guid>https://maxence.collard-lagalle.me/posts/formations/html-css/css-syntax-selectors-props/</guid><description>&lt;h2 id="syntaxe-de-css-3">Syntaxe de CSS 3&lt;/h2>
&lt;p>Une &lt;strong>feuille de style&lt;/strong> CSS 3 se compose d&amp;rsquo;un ensemble de &lt;strong>blocs&lt;/strong>.
Ces blocs sont introduits par un &lt;strong>sélecteur&lt;/strong> qui précise à quels éléments HTML il s&amp;rsquo;applique, puis d&amp;rsquo;une ou plusieurs &lt;strong>déclarations&lt;/strong>.
Une déclaration est une &lt;strong>propriété&lt;/strong> choisie parmi celles de la norme CSS 3, suivie d&amp;rsquo;une &lt;strong>valeur&lt;/strong> :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">selecteur-1&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> propriete-1: valeur;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> propriete-2: valeur;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">selecteur-2&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> propriete-3: valeur;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>De manière générale, CSS fonctionne avec une notion d&amp;rsquo;&lt;strong>héritage&lt;/strong> : si un élément est inclus dans un autre, il hérite de toutes les règles de style qui l&amp;rsquo;affecte.&lt;/p></description></item><item><title>Principales balises HTML 5</title><link>https://maxence.collard-lagalle.me/posts/formations/html-css/html-common-tags/</link><pubDate>Thu, 09 May 2024 21:15:00 +0100</pubDate><guid>https://maxence.collard-lagalle.me/posts/formations/html-css/html-common-tags/</guid><description>&lt;p>Le principe de HTML 5 est de proposer un ensemble normé d&amp;rsquo;éléments représentés par des balises XML, dont les règles d&amp;rsquo;interprétation sont censées être implémentées de manière homogène entre tous les clients HTML (et notamment, les navigateurs).&lt;/p>
&lt;p>La version actuellement en vigueur du standard HTML 5 est &lt;a href="https://html.spec.whatwg.org/" target="_blank" rel="noopener">publiquement consultable&lt;/a>. Néanmoins, il n&amp;rsquo;est pas utile dans un cadre général de connaître toutes les balises, certains étant beaucoup plus usuelles que d&amp;rsquo;autres.&lt;/p>
&lt;h2 id="typologie-des-éléments-html">Typologie des éléments HTML&lt;/h2>
&lt;p>Les éléments HTML 5 se décomposent en 2 grandes familles : les éléments de type &lt;strong>bloc&lt;/strong>, et les éléments &lt;strong>en ligne&lt;/strong> (&lt;em>inline&lt;/em>) :&lt;/p></description></item><item><title>Syntaxe HTML 5 et structure sémantique d'une page web</title><link>https://maxence.collard-lagalle.me/posts/formations/html-css/html-syntax-structure/</link><pubDate>Tue, 07 May 2024 11:30:00 +0100</pubDate><guid>https://maxence.collard-lagalle.me/posts/formations/html-css/html-syntax-structure/</guid><description>&lt;h2 id="syntaxe-de-html-5">Syntaxe de HTML 5&lt;/h2>
&lt;p>La syntaxe de HTML 5 est basée sur celle de XML, mais admet quelques simplifications.
Une version stricte, nommée XHTML, a existé en parallèle de HTML 4, avant d&amp;rsquo;être abandonnée par le W3C le 2 juillet 2009.&lt;/p>
&lt;h3 id="éléments-de-xml">Éléments de XML&lt;/h3>
&lt;p>Un document XML est un fichier texte structuré. Ce document est un &lt;strong>arbre&lt;/strong>, composé de &lt;strong>nœuds&lt;/strong>.&lt;/p>
&lt;p>Il est introduit par un &lt;strong>prologue&lt;/strong>, précisant des informations techniques telles que la version de la norme XML ou l&amp;rsquo;encodage utilisé.&lt;/p></description></item><item><title>Flux de travail usuels</title><link>https://maxence.collard-lagalle.me/posts/formations/git/workflows/</link><pubDate>Sun, 16 Apr 2023 19:00:00 +0100</pubDate><guid>https://maxence.collard-lagalle.me/posts/formations/git/workflows/</guid><description>&lt;p>Un flux de travail (en anglais, &lt;em>workflow&lt;/em>) est une façon standardisée d&amp;rsquo;organiser les branches d&amp;rsquo;un projet Git.
Leur utilisation permet de bénéficier de méthodes éprouvées pour s&amp;rsquo;adapter à des modes usuels d&amp;rsquo;organisation et d&amp;rsquo;outils spécifiquement conçus pour leur prise en charge.&lt;/p>
&lt;h2 id="gitflow">GitFlow&lt;/h2>
&lt;p>GitFlow est un flux de travail qui a été proposé par &lt;a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">Vincent Driessen&lt;/a> en 2010.
Son objectif est de permettre en parallèle la maintenance d&amp;rsquo;une version de production et l&amp;rsquo;élaboration d&amp;rsquo;une version de développement.&lt;/p></description></item><item><title>Gérer un dépôt Git</title><link>https://maxence.collard-lagalle.me/posts/formations/git/repo-management/</link><pubDate>Sun, 16 Apr 2023 19:00:00 +0100</pubDate><guid>https://maxence.collard-lagalle.me/posts/formations/git/repo-management/</guid><description>&lt;h2 id="dépôt-local">Dépôt local&lt;/h2>
&lt;p>Un &lt;strong>dépôt&lt;/strong> (ou &amp;ldquo;repository&amp;rdquo; en anglais) est l&amp;rsquo;endroit où Git stocke l&amp;rsquo;historique des versions d&amp;rsquo;un projet de développement.
Il existe deux types de dépôts dans Git :&lt;/p>
&lt;ul>
&lt;li>Un &lt;strong>dépôt local&lt;/strong> est une copie du dépôt sur l&amp;rsquo;ordinateur local d&amp;rsquo;un développeur&lt;/li>
&lt;li>Un &lt;strong>dépôt distant&lt;/strong> est un dépôt hébergé sur un serveur distant, accessible via Internet.&lt;/li>
&lt;/ul>
&lt;h3 id="créer-un-dépôt-local">Créer un dépôt local&lt;/h3>
&lt;p>Pour créer un dépôt local avec Git, il suffit de se positionner en ligne de commandes (via &lt;code>cd&lt;/code>) dans un dossier à transformer en dépôt et d&amp;rsquo;utiliser la commande :&lt;/p></description></item><item><title>Introduction</title><link>https://maxence.collard-lagalle.me/posts/formations/git/introduction/</link><pubDate>Sun, 16 Apr 2023 19:00:00 +0100</pubDate><guid>https://maxence.collard-lagalle.me/posts/formations/git/introduction/</guid><description>&lt;p>&lt;a href="https://git-scm.com/" target="_blank" rel="noopener">Git&lt;/a> a été créé par Linus Torvalds, le créateur du système d&amp;rsquo;exploitation Linux, en 2005.
Il a été conçu pour être un VCS décentralisé, capable de gérer efficacement les grands projets open source tels que le développement du noyau Linux.
Git a rapidement gagné en popularité auprès de la communauté du développement de logiciels en raison de sa rapidité, de sa facilité d&amp;rsquo;utilisation et de sa flexibilité.&lt;/p>
&lt;p>Git, en tant que VCS décentralisé (ou distribué), permet à chaque développeur de disposer d&amp;rsquo;une copie complète de l&amp;rsquo;historique des modifications et du code source sur leur ordinateur.
Ils peuvent dont travailler en mode déconnecté (sans accès à Internet ou à un serveur centralisé) et ont accès à toutes les versions du code source.
Cela signifie qu&amp;rsquo;&lt;strong>il n&amp;rsquo;y a pas de point unique de défaillance&lt;/strong>, car le référentiel de code est distribué sur plusieurs machines.&lt;/p></description></item><item><title>Introduction à GitLab CI</title><link>https://maxence.collard-lagalle.me/posts/formations/git/gitlab-ci/</link><pubDate>Sun, 16 Apr 2023 19:00:00 +0100</pubDate><guid>https://maxence.collard-lagalle.me/posts/formations/git/gitlab-ci/</guid><description>&lt;p>L&amp;rsquo;intégration continue (&lt;em>Continuous Integration, CI&lt;/em>) est une pratique de développement logiciel qui consiste à tester et à construire automatiquement un projet chaque fois qu&amp;rsquo;un développeur soumet un changement dans le code source.
Cette pratique vise à détecter rapidement les erreurs de code et à garantir que le code est fonctionnel et prêt à être déployé.&lt;/p>
&lt;p>Un &lt;strong>pipeline&lt;/strong> d&amp;rsquo;intégration continue est un processus automatisé qui permet de construire, tester et déployer un projet.
Il s&amp;rsquo;agit d&amp;rsquo;une série d&amp;rsquo;étapes configurées pour être exécutées automatiquement par un &lt;code>runner&lt;/code> lorsque des événements surviennent un dépôt (comme un commit).&lt;/p></description></item><item><title>Premiers pas</title><link>https://maxence.collard-lagalle.me/posts/formations/git/first-steps/</link><pubDate>Sun, 16 Apr 2023 19:00:00 +0100</pubDate><guid>https://maxence.collard-lagalle.me/posts/formations/git/first-steps/</guid><description>&lt;h2 id="installation-de-git">Installation de Git&lt;/h2>
&lt;h3 id="linux">Linux&lt;/h3>
&lt;p>Git est généralement installé directement dans la plupart des distributions Linux.
Sinon, il est installable dans un terminal au travers du gestionnaire de paquets de la distribution :&lt;/p>
&lt;ul>
&lt;li>Debian : &lt;code>sudo apt install git-all&lt;/code>&lt;/li>
&lt;li>Fedora : &lt;code>sudo dnf install git-all&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="macos">macOS&lt;/h3>
&lt;p>Sur macOS Mavericks (10.9) ou ultérieur, Git est fourni au travers des Xcode Command Line Tools.
Il suffit d&amp;rsquo;essayer de lancer Git dans un terminal via une commande comme &lt;code>git --version&lt;/code> pour que macOS propose de l&amp;rsquo;installer avec d&amp;rsquo;autres outils de développement.
Sinon, il est possible d&amp;rsquo;utiliser &lt;a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew&lt;/a> via &lt;code>brew install git&lt;/code> ou de &lt;a href="https://git-scm.com/download/mac" target="_blank" rel="noopener">télécharger l&amp;rsquo;installateur&lt;/a>.&lt;/p></description></item><item><title>Travailler avec GitLab</title><link>https://maxence.collard-lagalle.me/posts/formations/git/software-forge/</link><pubDate>Sun, 16 Apr 2023 19:00:00 +0100</pubDate><guid>https://maxence.collard-lagalle.me/posts/formations/git/software-forge/</guid><description>&lt;p>Une forge logicielle est une plateforme web qui permet aux développeurs de gérer leur code source, de collaborer sur des projets de développement, de suivre les bugs et les problèmes, et de déployer des applications.
Outre le suivi de version basé sur Git, les forges logicielles incluent des fonctionnalités comme la création de merge requests, la gestion de bugs, la documentation, la gestion des tâches, les tests automatisés et les déploiements continus.&lt;/p></description></item></channel></rss>