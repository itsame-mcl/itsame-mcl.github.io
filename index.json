[{"categories":["Formation"],"contents":"Syntaxe de CSS 3 Une feuille de style CSS 3 se compose d\u0026rsquo;un ensemble de blocs. Ces blocs sont introduits par un sélecteur qui précise à quels éléments HTML il s\u0026rsquo;applique, puis d\u0026rsquo;une ou plusieurs déclarations. Une déclaration est une propriété choisie parmi celles de la norme CSS 3, suivie d\u0026rsquo;une valeur :\nselecteur-1 { propriete-1: valeur; propriete-2: valeur; } selecteur-2 { propriete-3: valeur; } De manière générale, CSS fonctionne avec une notion d\u0026rsquo;héritage : si un élément est inclus dans un autre, il hérite de toutes les règles de style qui l\u0026rsquo;affecte.\nLiaison entre un style CSS et un document HTML La façon la plus commune de lier une feuille de style CSS avec un document HTML est de l\u0026rsquo;enregistrer sous la forme d\u0026rsquo;un fichier texte avec l\u0026rsquo;extension .css, puis de le lier au document HTML grâce à une balise \u0026lt;link\u0026gt;.\nIl est également possible d\u0026rsquo;écrire la feuille de style CSS directement dans le document HTML au moyen d\u0026rsquo;une balise \u0026lt;style\u0026gt; incluse dans le \u0026lt;head\u0026gt;. Cette pratique est cependant à éviter, en particulier pour un site multi-pages, car elle ne permet pas de mutualiser les règles de style entre plusieurs pages, et oblige à faire des duplications.\nEnfin, les éléments HTML admettent un attribut style= qui permet de préciser directement des déclarations pour un élément. Cette pratique est également déconseillée, car il est souvent possible d\u0026rsquo;obtenir le même résultat grâce à la diversité des sélecteurs HTML disponibles.\nSélecteurs Les sélecteurs introduisent les blocs d\u0026rsquo;instructions CSS. Ils permettent de préciser à quels éléments HTML d\u0026rsquo;une page les déclarations du bloc doivent s\u0026rsquo;appliquer. Il est possible d\u0026rsquo;utiliser plusieurs sélecteurs sur un même bloc en les séparant par des virgules (,).\nSélecteur universel Le sélecteur * permet d\u0026rsquo;appliquer un bloc à l\u0026rsquo;ensemble des éléments d\u0026rsquo;une page HTML.\nBalises HTML Les sélecteurs les plus simples reprennent le nom des balises HTML. Ils permettent d\u0026rsquo;appliquer un bloc à tous les éléments HTML définis par cette balise.\nExemple a { text-decoration: none; } Ce bloc CSS s\u0026rsquo;applique à tous les liens d\u0026rsquo;une page (balise \u0026lt;a\u0026gt;), et permet d\u0026rsquo;éviter leur affichage souligné.\nIdentifiants et classes Tous les éléments HTML peuvent être associés à un identifiant grâce à un attribut id= et à une ou plusieurs classes grâce à l\u0026rsquo;attribut class=.\nUn identifiant doit être unique à l\u0026rsquo;échelle d\u0026rsquo;un document HTML, alors qu\u0026rsquo;une classe peut être attribuée à plusieurs éléments. Pour donner plusieurs classes à un même élément, il convient de les séparer par un espace.\nCes identifiants et classes peuvent ensuite être utilisés comme des sélecteurs CSS, en les préfixant d\u0026rsquo;un dièse (#) pour les identifiants, et d\u0026rsquo;un point (.) pour les classes :\n#identifiant { ... } .classe { ... } Il est possible de combiner une balise HTML et un identifiant ou une classe :\na.non-souligne { text-decoration: none; } Dans cet exemple, seules les balises \u0026lt;a\u0026gt; ayant un attribut class=\u0026quot;non-souligne\u0026quot; se veront privés de leur trait de soulignement.\nPseudo-classes Les pseudo-classes ne sont pas définies par un attribut class=, mais sont générées dynamiquement et automatiquement. Elles sont utilisables en tant que sélecteur CSS en les préfixant par deux-points (:). Parmi les pseudo-classes usuelles, on trouve :\n:first-child : premier élément enfant d\u0026rsquo;un conteneur parent. :nth-child(n) : n-ième élément enfant d\u0026rsquo;un conteneur parent. :last-child : dernier élément enfant d\u0026rsquo;un conteneur parent. :not(selecteur) : tous les éléments qui ne sont pas compatibles avec le sélecteur indiqué. :link : liens hypertextes non visités. :visited : liens hypertextes déjà visités. :hover : élément actuellement survolé par le curseur. :active : élement actuellement actif (cliqué). Les pseudo-classes peuvent également être utilisées en combinaison avec une balise HTML, un identifiant ou une classe.\nPseudo-éléments Les pseudo-éléments sont également générés de manière dynamique, et permettent de manipuler des éléments qui existent de manière implicite dans le document HTML. Ils se préfixent par deux deux-points (::). Moins nombreux que les pseudo-classes, les 6 plus usuels sont :\n::first-letter : premier caractère d\u0026rsquo;un élément. ::first-line : première ligne d\u0026rsquo;un élément. ::selection : texte surligné/sélectionné par l\u0026rsquo;utilisateur. ::marker : puces d\u0026rsquo;une liste non ordonnée. ::before : S\u0026rsquo;utilise en combinaison avec un autre sélecteur et représente un pseudo-élément s\u0026rsquo;insérant juste avant. ::after : S\u0026rsquo;utilise en combinaison avec un autre sélecteur et représente un pseudo-élément s\u0026rsquo;insérant juste après. Inclusion et juxtaposition Il est également possible de construire des sélecteurs s\u0026rsquo;attachant aux relations d\u0026rsquo;inclusion ou de juxtaposition entre deux éléments.\nelement1 element2 permet de sélectionner tous les element2 qui sont un enfant d\u0026rsquo;un element1, quel que soit le nombre d\u0026rsquo;éléments intermédiaires imbriqués. element1 \u0026gt; element2 permet de sélectionner tous les element2 qui sont des enfants directs d\u0026rsquo;un element1, sans aucun autre élément intermédiaire imbriqué. element1 + element2 permet de sélectionner tous les element2 qui sont directement juxtaposés à un element1. Concrètement, cela signifie que la balise ouvrante de element2 suit immédiatement la balise fermante de element1. Priorité entre les sélecteurs Il existe plusieurs logiques de priorité entre les sélecteurs : d\u0026rsquo;une part, si deux blocs portent sur le même sélecteur et spécifient une valeur différente pour la même propriété, celui qui est décrit en second dans l\u0026rsquo;ordre de la feuille de style prime sur celui qui est écrit en premier. De plus, un sélecteur portant sur un identifiant primera sur un autre portant sur une classe, qui primera lui-même sur un sélecteur simple.\nIl est cependant possible de rendre une propriété prioritaire sur toutes les autres en y ajoutant !important après sa valeur, par exemple text-decoration: none !important;\nPropriétés usuelles Il existe actuellement 520 propriétés CSS différentes, mais certaines sont plus usuelles que d\u0026rsquo;autres.\nLes propriétés relatives au positionnement des blocs feront l\u0026rsquo;objet d\u0026rsquo;un chapitre spécifique. Dimensions, bordures et marges CSS est construit autour d\u0026rsquo;un modèle de \u0026ldquo;boîtes\u0026rdquo;, qui définit la dimension totale d\u0026rsquo;un élément HTML. Cette boîte se compose de 4 éléments concentriques : le contenu, le padding (littéralement \u0026ldquo;rembourrage\u0026rdquo;), la bordure et la marge.\nPlusieurs unités peuvent être utilisées pour définir ces dimensions. Les valeurs peuvent être entières ou décimales, le séparateur décimal étant le point (.). Les unités les plus usuelles sont :\nrem : hauteur d\u0026rsquo;un caractère majuscule dans le nœud racine de la page (par défaut, 16 pixels) em : hauteur d\u0026rsquo;un caractère majuscule dans l\u0026rsquo;élément parent px : pixel % : taille relative soit à celle de l\u0026rsquo;élément parent (pour les éléments bloc), soit à la relation d\u0026rsquo;équivalence 1em = 100 % (pour les éléments en ligne) vw : 1 % de la largeur de la fenêtre du navigateur de l\u0026rsquo;utilisateur vh : 1 % de la hauteur de la fenêtre du navigateur de l\u0026rsquo;utilisateur cm, mm : centimètres et millimètres, utiles notamment pour des pages ayant vocation à être imprimées Contenu Le contenu étant au cœur de la boîte, sa dimension se définie simplement à partir de sa hauteur et de sa largeur :\nwidth : largeur du contenu height : hauteur du contenu La valeur auto permet de conserver la valeur automatiquement calculée par défaut. Pour les éléments en ligne, seuls ceux dits dimensionnables (tels que \u0026lt;img\u0026gt;) peuvent avoir des valeurs fixées pour widthet height.\nPadding (marge interne) La marge interne (padding) est la 2ᵉ couche du modèle de boîte. Par défaut, sa valeur est nulle. Les propriétés qui permettent de la définir sont les suivantes :\npadding-top : Marge interne supérieure padding-bottom Marge interne inférieure padding-left : Marge interne gauche padding-right : Marge interne droite Bordure Les bordures sont la 3ᵉ couche du modèle de boîte. Par défaut, les bordures sont désactivées et de taille nulle. Il convient donc de préciser à la fois la taille et le style des bordures. Ainsi, la valeur des propriétés liées aux bordures se décompose en 3 parties : dimension, style et couleur.\nSur le même modèle que la marge interne, les propriétés permettant de fixer les bordures sont border-top, border-bottom, border-left et border-right.\nLe style de la bordure peut être précisé au moyen de plusieurs valeurs, les plus usuelles étant :\nsolid : bordure pleine double : double bordure dotted : bordure en pointillés à base de points dashed : bordure en pointillés à base de tirets Marge externe La marge externe est la 4ᵉ et dernière couche du modèle de boîte. Elle se définit de la même manière que la marge interne, avec les propriétés margin-top, margin-bottom, margin-left et margin-right.\nRaccourcis Les propriétés sur le padding, la bordure et la marge admettent une version raccourcie, qui sont respectivement padding, border-width et margin. Elles peuvent être suivies de 1 à 4 valeurs permettant de préciser les dimensions :\n1 valeur : S\u0026rsquo;applique uniformément aux 4 côtés de la boîte. 2 valeurs : la première valeur s\u0026rsquo;applique aux côtés supérieur et inférieur, la seconde aux côtés latéraux. 3 valeurs : la première valeur s\u0026rsquo;applique au côté supérieur, la deuxième aux côtés latéraux et la troisième au côté inférieur. 4 valeurs : la première valeur s\u0026rsquo;applique au côté supérieur, la deuxième au côté droit, la troisième au côté inférieur et la quatrième au côté gauche. Pour les bordures, la propriété border-width est à compléter par la propriété border-style qui prend également de 1 à 4 valeurs de style. Si l\u0026rsquo;on souhaite utiliser la même valeur de dimension et de style pour les 4 côtés, il existe aussi la propriété border.\nDépassement Lorsque l\u0026rsquo;on fixe les dimensions d\u0026rsquo;un bloc, il est possible que son contenu ne puisse pas y loger intégralement. La propriété CSS overflow permet de régler le comportement à adopter dans ce cas de figure :\nvisible (par défaut) : le contenu déborde en dehors du bloc, jusqu\u0026rsquo;à occuper l\u0026rsquo;espace qui lui est nécessaire. hidden: le contenu qui ne peut pas tenir dans le bloc est masqué scroll : une barre de navigation s\u0026rsquo;affiche pour permettre de consulter le contenu qui dépasse du bloc auto : le client est autorisé à gérer automatiquement le dépassement. Pour les navigateurs, cela implique généralement de n\u0026rsquo;afficher une barre de défilement que si nécessaire. Box-sizing La propriété box-sizing permet de modifier le comportement du modèle de boîte. Grâce à elle, il est possible de faire en sorte que les propriétés width et height englobent des couches en plus de celle du contenu principal, ce qui permet de simplifier la mise en page. Elle peut prendre 3 valeurs :\ncontent-box : comportement par défaut, width et height définissent les dimensions du contenu. padding-box : width et height définissent les dimensions du contenu et du padding. border-box : width et height définissent les dimensions du contenu, du padding et de la bordure. Cette valeur est souvent utilisée, car elle permet de n\u0026rsquo;avoir ensuite à gérer que les marges extérieures. Mode d\u0026rsquo;affichage La propriété display permet de modifier le comportement d\u0026rsquo;un élément HTML. Elle est à utiliser avec précaution car elle peut parfois créer des résultats complexes à maintenir, mais permet de donner davantage de souplesse. Ses principales valeurs sont :\nblock : l\u0026rsquo;élément se comporte comme un élément bloc inline : l\u0026rsquo;élément se comporte comme un élément en ligne non dimensionnable inline-block : l\u0026rsquo;élément se comporte comme un élément en ligne dimensionnable Mise en forme du texte Dans les éléments HTML contenant du texte, il est possible d\u0026rsquo;utiliser de nombreuses propriétés pour le mettre en forme.\nPolice La police de caractères est fixée grâce à la propriété font-family. Pour pouvoir être affichée, la police doit être installée sur l\u0026rsquo;ordinateur du client qui consulte la page web.\nIl est donc possible et même recommandé de proposer une liste de plusieurs polices, séparées par une virgule. Enfin, la liste de polices devrait se terminer par une police générique, proposée sur la plupart des systèmes. Les plus usuelles sont serif (police à empattement, comme Times New Roman), sans-serif (police sans empattement, comme Arial) et monospace (police à largeur fixe, comme Courier).\nPour pouvoir utiliser des polices moins usuelles, il est également possible de les fournir directement au moyen d\u0026rsquo;un bloc @font-face. Il est nécessaire de disposer de la police dans un ou plusieurs des formats suivants : woff2 (.woff2), woff (.woff), opentype (.otf, .ttf), collection (.otc, .ttc), embedded-opentype (.eot) ou svg (.svg, .svgz).\nLe bloc @font-face doit se composer de deux déclarations : font-family pour indiquer de la police, tel qu\u0026rsquo;il pourra être ensuite utilisé ailleurs dans la feuille de style, et src pour donner le chemin d\u0026rsquo;accès aux fichiers de la police :\n@font-face { font-family: \u0026#34;Police\u0026#34;; src: local(\u0026#34;Police\u0026#34;), url(\u0026#34;police.woff2\u0026#34;) format(\u0026#34;woff2\u0026#34;), url(\u0026#34;police.otf\u0026#34;) format(\u0026#34;opentype\u0026#34;), url(\u0026#34;police.ttf\u0026#34;) format(\u0026#34;opentype\u0026#34;); } La première ligne de src permet d\u0026rsquo;utiliser en priorité une version installée sur l\u0026rsquo;ordinateur du client si jamais il possède déjà cette police. Cela permet d\u0026rsquo;éviter des flux réseaux inutiles, car la police doit sinon être téléchargée par le client.\nTaille et interligne La taille de la police de caractères est fixée grâce à la propriété font-size. Les mêmes unités de mesure que pour le dimensionnement des éléments sont utilisables.\nL\u0026rsquo;interligne est pour sa part fixé par la propriété line-height. Outre les unités de mesure habituelles, il est également possible de fixer une valeur sans unité (sur le modèle de celle des traitements de texte), 1 étant l\u0026rsquo;interligne minimal et 1.15 l\u0026rsquo;interligne standard.\nCouleur La couleur du texte est réglée par la propriété color. Elle admet plusieurs types de valeurs :\nun nom de couleur (en anglais), parmi les 140 noms actuellement disponibles : red, green, blue\u0026hellip; une valeur hexadécimale, au format #aabbcc (pour les valeurs de rouge, vert et bleu) ou #aabbccdd (rouge, vert, bleu, avec la transparence) une combinaison de couleurs rouge, vert, bleu avec des valeurs entre 0 et 255 ou en pourcentage : rgb(rouge, vert, bleu) ; ou rgba(rouge, vert, bleu, alpha) pour rajouter la transparence une combinaison teinte, saturation, luminosité : hsl(teinte, saturation, luminosite) ; ou hsla(teinte, saturation, luminosite, alpha) pour rajouter la transparence Gras, italique, souligné Trois propriétés permettent de gérer ces différents aspects de l\u0026rsquo;apparence du texte :\nfont-weight : permet de modifier l\u0026rsquo;épaisseur de la police, la valeur bold étant la mise en gras. font-style : permet de modifier le style de la police, la valeur italic étant l\u0026rsquo;italique. text-decoration : permet d\u0026rsquo;appliquer des effets au texte, les valeurs usuelles étant none pour l\u0026rsquo;absence d\u0026rsquo;effet, underline pour le souligné ou line-through pour le texte barré. Alignement et retrait L\u0026rsquo;alignement du texte est paramétré par la propriété text-align. Ses valeurs sont semblables à celle d\u0026rsquo;un traitement de texte :\nleft : aligné à gauche right : aligné à droite center : centré justify : justifié Un retrait peut être fixé par la propriété text-indent, suivi d\u0026rsquo;une dimension (positive ou négative).\nCasse Il est également possible de modifier la casse d\u0026rsquo;un texte directement en CSS grâce à la propriété text-transform. Trois valeurs sont souvent utilisées : lowercase pour mettre le texte en minuscule, uppercase pour mettre le texte en majuscule et capitalize pour mettre la 1ʳᵉ lettre de chaque mot en majuscule.\nArrière-plan Deux approches sont possibles pour donner un arrière-plan à un élément : fixer une couleur de fond grâce à la propriété background-color, ou utiliser une image de fond. Pour cette solution, plusieurs propriétés sont à utiliser :\nbackground-image : permet d\u0026rsquo;indiquer l\u0026rsquo;image à utiliser comme arrière-plan, avec une valeur au format url(chemin/vers/image) background-repeat : par défaut, l\u0026rsquo;image de fond se répète horizontalement et verticalement. Il est possible d\u0026rsquo;utiliser une répétition uniquement horizontale avec repeat-x, uniquement verticale avec repeat-y ou de désactiver la répétition avec no-repeat. background-position : permet de fixer la position de l\u0026rsquo;image de fond par rapport à l\u0026rsquo;élément auquel la propriété s\u0026rsquo;applique. La première valeur donne l\u0026rsquo;alignement horizontal et la seconde l\u0026rsquo;alignement vertical. background-attachement : permet de définir si l\u0026rsquo;image de fond doit défiler en même temps que l\u0026rsquo;élément auquel elle est liée (local), ou si elle doit rester fixe sur la page (fixed). Les images d\u0026rsquo;arrière-plan sont souvent utilisées aujourd\u0026rsquo;hui pour créer des fonds non unis, avec des motifs géométriques répétables. Contrairement aux autres propriétés CSS, ces propriétés ne sont pas héritées par les éléments enfants.\nListes Des propriétés CSS permettent également de personnaliser les listes, notamment non ordonnées :\nlist-style-type : permet de définir le style de puce. Les valeurs possibles sont disc pour des ronds pleins, square pour des carrés, ou alors tout caractère unique, y compris un emoji, comme ▶️. list-style-position : permet de choisir si les puces sont à l\u0026rsquo;intérieur (inside) ou à l\u0026rsquo;extérieur (outside) de la boîte englobant la liste. list-style-image : permet d\u0026rsquo;utiliser une image comme puce, en précisant son url (url(lien/vers/la/puce)) ","date":"May 12, 2024","hero":"/images/default-hero.jpg","permalink":"https://maxence.collard-lagalle.me/posts/formations/html-css/css-syntax-selectors-props/","summary":"Syntaxe de CSS 3 Une feuille de style CSS 3 se compose d\u0026rsquo;un ensemble de blocs. Ces blocs sont introduits par un sélecteur qui précise à quels éléments HTML il s\u0026rsquo;applique, puis d\u0026rsquo;une ou plusieurs déclarations. Une déclaration est une propriété choisie parmi celles de la norme CSS 3, suivie d\u0026rsquo;une valeur :\nselecteur-1 { propriete-1: valeur; propriete-2: valeur; } selecteur-2 { propriete-3: valeur; } De manière générale, CSS fonctionne avec une notion d\u0026rsquo;héritage : si un élément est inclus dans un autre, il hérite de toutes les règles de style qui l\u0026rsquo;affecte.","tags":["CSS 3"],"title":"Syntaxe CSS 3, sélecteurs et propriétés usuelles"},{"categories":["Formation"],"contents":"Le principe de HTML 5 est de proposer un ensemble normé d\u0026rsquo;éléments représentés par des balises XML, dont les règles d\u0026rsquo;interprétation sont censées être implémentées de manière homogène entre tous les clients HTML (et notamment, les navigateurs).\nLa version actuellement en vigueur du standard HTML 5 est publiquement consultable. Néanmoins, il n\u0026rsquo;est pas utile dans un cadre général de connaître toutes les balises, certains étant beaucoup plus usuelles que d\u0026rsquo;autres.\nTypologie des éléments HTML Les éléments HTML 5 se décomposent en 2 grandes familles : les éléments de type bloc, et les éléments en ligne (inline) :\nLes éléments bloc délimitent des sections de la page. Par défaut, ils occupent toute la largeur de la page et se succèdent verticalement, dans l\u0026rsquo;ordre où ils sont décrits dans le document HTML, et sont séparés par un retour à la ligne. Les éléments en ligne s\u0026rsquo;inscrivent dans la continuité du flux de la page. Par défaut, ils occupent la taille minimale nécessaire à leur affichage, et ne provoquent aucun retour à la ligne. Les éléments en ligne peuvent être imbriqués, mais ne peuvent en aucun cas contenir d\u0026rsquo;élément bloc. En revanche, des éléments blocs peuvent être imbriqués entre eux et contenir des éléments en ligne.\nÉlements usuels de type bloc Titres et intertitres Les balises \u0026lt;h1\u0026gt; a \u0026lt;h6\u0026gt; permettent de définir jusqu\u0026rsquo;à 6 niveaux de titres et inter-titres au sein d\u0026rsquo;une page web.\nParagraphes Un paragraphe standard, contenant du texte et autres éléments, est délimité par une balise \u0026lt;p\u0026gt;. Il existe cependant d\u0026rsquo;autres types de paragraphes :\n\u0026lt;pre\u0026gt; : texte préformaté, permettant de préserver les retours à la ligne et les espaces tels que définis dans le texte. \u0026lt;blockquote\u0026gt; : citation d\u0026rsquo;une autre source, ou d\u0026rsquo;une autre page web (pouvant être précisée par un attribute cite=). Généralement mis en retrait dans l\u0026rsquo;affichage par défaut des navigateurs. \u0026lt;address\u0026gt; : paragraphe dédié à des informations de contact ou à une adresse postale. Listes Toutes les balises liées aux listes sont des balises de type bloc. Il existe trois types de listes :\nListe ordonnée : il s\u0026rsquo;agit d\u0026rsquo;une liste dont tous les éléments sont numérotés. Elle s\u0026rsquo;initialise par une balise \u0026lt;ol\u0026gt; (ordered list). Cette numérotation peut être personnalisée de plusieurs manières grâce à des attributs : start= permet de définir la 1ʳᵉ valeur de la liste. type= permet de préciser le type de numérotation à utiliser, les types possibles étant 1, A, a, I et i. reversed permet de retourner l\u0026rsquo;ordre de numérotation (qui est croissant par défaut) Liste à puces : dans cette liste, chaque élément est précédé par une puce (par défaut, un point épais), sans qu\u0026rsquo;il n\u0026rsquo;y ait nécessairement d\u0026rsquo;ordre. Ce type de liste se déclare avec une balise \u0026lt;ul\u0026gt; (unordered list) Chaque ligne à l\u0026rsquo;intérieur de ces deux types de liste se définit par une balise \u0026lt;li\u0026gt; (list item). L\u0026rsquo;attribut value= permet de donner une valeur spécifique à une ligne dans une liste ordonnée.\nExemple \u0026lt;ol type=\u0026#34;I\u0026#34;\u0026gt; \u0026lt;li\u0026gt;Élément I\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Élement II\u0026lt;/li\u0026gt; \u0026lt;li value=\u0026#34;V\u0026#34;\u0026gt;Élément V\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; Liste de définitions : cette liste permet de définir un glossaire, ou plus généralement une liste d\u0026rsquo;éléments associés à leur définition. Elle s\u0026rsquo;initialise avec la balise \u0026lt;dl\u0026gt; (description list). Chaque élément est ensuite introduit par une balise \u0026lt;dt\u0026gt; (description term), puis sa définition est précisée grâce à une balise \u0026lt;dd\u0026gt; (description term description). Exemple \u0026lt;dl\u0026gt; \u0026lt;dt\u0026gt;HTML\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;HyperText Markup Language\u0026lt;/dd\u0026gt; \u0026lt;dt\u0026gt;CSS\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;Cascading Style Sheets\u0026lt;/dd\u0026gt; \u0026lt;/dl\u0026gt; Élements sémantiques et élément neutre Les éléments sémantiques (présentés dans le chapitre précédent) sont des éléments de type bloc : \u0026lt;main\u0026gt;, \u0026lt;section\u0026gt;, \u0026lt;article\u0026gt;, \u0026lt;aside\u0026gt;, \u0026lt;nav\u0026gt;, \u0026lt;menu\u0026gt;, \u0026lt;header\u0026gt;, \u0026lt;footer\u0026gt;\nEnfin, HTML 5 propose un élément neutre de type bloc : \u0026lt;div\u0026gt;. Il est très utile pour pouvoir délimiter des blocs qui n\u0026rsquo;ont pas de sens sémantique, mais auxquels doivent s\u0026rsquo;appliquer des règles différentes de mise en forme. Dans l\u0026rsquo;idéal, il convient de n\u0026rsquo;utiliser div que lorsqu\u0026rsquo;il n\u0026rsquo;existe pas de balise permettant de décrire correctement le sens d\u0026rsquo;un bloc.\nLes tableaux et formulaires, qui sont également des balises de type bloc, sont traités dans un chapitre dédié. Éléments usuels de type en ligne Emphases L\u0026rsquo;emphase faible se déclare au moyen d\u0026rsquo;une balise \u0026lt;em\u0026gt;. Par défaut, cette emphase est représentée par l\u0026rsquo;italique. L\u0026rsquo;emphase forte se déclare au moyen d\u0026rsquo;une balise \u0026lt;strong\u0026gt;. Par défaut, cette emphase est représentée par la mise en gras. À noter que ces balises ont avant tout un sens sémantique, car le comportement de mise en italique ou en gras peut être modifié par la feuille de style. Il existe également des balises \u0026lt;i\u0026gt; et \u0026lt;b\u0026gt; permettant de demander une mise en italique ou en gras (bold), sans sens sémantique.\nExposants et indices Un exposant (caractères occupant uniquement la moitié supérieure de la ligne de texte) est déclaré par la balise \u0026lt;sup\u0026gt; (superscript). Un indice (caractères occupant uniquement la moitié inférieure de la ligne de texte) est déclaré par la balise \u0026lt;sub\u0026gt; (subscript). Liens hypertextes Un lien hypertexte est délimité au moyen d\u0026rsquo;une balise \u0026lt;a\u0026gt;.\nL\u0026rsquo;attribut href= permet de définir la cible du lien, qu\u0026rsquo;il s\u0026rsquo;agisse d\u0026rsquo;une autre page web, ou d\u0026rsquo;un autre emplacement de la même page. Il est obligatoire.\nPour cibler un élément de la même page (une ancre), cet élément doit avoir un attribut id=, ayant pour valeur un nom qui doit être unique. Ce nom est ensuite utilisé dans l\u0026rsquo;attribut href, précédé d\u0026rsquo;un dièse (# ).\nExemple \u0026lt;section id=\u0026#34;partie-1\u0026#34;\u0026gt;\u0026lt;/section\u0026gt; \u0026lt;section id=\u0026#34;partie-2\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Voir la \u0026lt;a href=\u0026#34;#partie-1\u0026#34;\u0026gt;première partie\u0026lt;/a\u0026gt; pour en savoir plus.\u0026lt;/p\u0026gt; \u0026lt;/section\u0026gt; D\u0026rsquo;autres attributs peuvent églement être précisés, notamment pour améliorer l\u0026rsquo;accessibilité des liens :\ntitle= permet de donner un titre au lien, qui sera généralement affiché sous forme d\u0026rsquo;infobulle accesskey= permet d\u0026rsquo;associer un lien à un raccourci clavier de la forme Alt+accesskey, sous réserve que cette combinaison ne soit pas déjà utilisée par le navigateur. target= permet de préciser comment le navigateur doit ouvrir le lien. Les valeurs les plus usuelles sont _self pour une ouverture dans le même onglet et _blank pour une ouverture dans un nouvel onglet. Images L\u0026rsquo;insertion d\u0026rsquo;une image s\u0026rsquo;effectue au moyen de la balise \u0026lt;img\u0026gt;. Cette balise a deux attributs obligatoires :\nsrc= pour renseigner la source de l\u0026rsquo;image à afficher. Le support des différents formats d\u0026rsquo;image dépend des navigateurs, mais en général, les formats JPEG, PNG et GIF sont supportés. Les images devant être chargées pour permettre l\u0026rsquo;affichage de la page, il est déterminant de minimiser le poids des fichiers. alt= permet de fournir une description de l\u0026rsquo;image, à destination des publics utilisant des outils d\u0026rsquo;accessibilité tels que des lecteurs d\u0026rsquo;écran. Il doit rester vide pour une image purement décorative, n\u0026rsquo;ayant aucun sens sémantique. Comme pour les liens, l\u0026rsquo;attribut title= permet d\u0026rsquo;ajouter un titre, affiché sous forme d\u0026rsquo;infobulle.\nÉlément neutre A l\u0026rsquo;instar des éléments de type bloc, les éléments de type en ligne admettent un élément neutre, permettant d\u0026rsquo;effectuer des mises en forme particulières, indépendamment de toute notion sémantique. Il s\u0026rsquo;agit de l\u0026rsquo;élément \u0026lt;span\u0026gt;.\n","date":"May 9, 2024","hero":"/images/default-hero.jpg","permalink":"https://maxence.collard-lagalle.me/posts/formations/html-css/html-common-tags/","summary":"Le principe de HTML 5 est de proposer un ensemble normé d\u0026rsquo;éléments représentés par des balises XML, dont les règles d\u0026rsquo;interprétation sont censées être implémentées de manière homogène entre tous les clients HTML (et notamment, les navigateurs).\nLa version actuellement en vigueur du standard HTML 5 est publiquement consultable. Néanmoins, il n\u0026rsquo;est pas utile dans un cadre général de connaître toutes les balises, certains étant beaucoup plus usuelles que d\u0026rsquo;autres.","tags":["HTML 5"],"title":"Principales balises HTML 5"},{"categories":["Formation"],"contents":"Syntaxe de HTML 5 La syntaxe de HTML 5 est basée sur celle de XML, mais admet quelques simplifications. Une version stricte, nommée XHTML, a existé en parallèle de HTML 4, avant d\u0026rsquo;être abandonnée par le W3C le 2 juillet 2009.\nÉléments de XML Un document XML est un fichier texte structuré. Ce document est un arbre, composé de nœuds.\nIl est introduit par un prologue, précisant des informations techniques telles que la version de la norme XML ou l\u0026rsquo;encodage utilisé.\nUn arbre contient un unique nœud principal, nommé nœud document (ou racine). Il contient ensuite un ou plusieurs nœuds élément, pouvant eux-mêmes contenir d\u0026rsquo;autres nœuds élément ou des nœuds texte.\nLe nom du nœud document et des nœuds élément est libre, mais ne peut pas contenir d\u0026rsquo;espace où l\u0026rsquo;un des caractères suivants : !\u0026quot;#$%\u0026amp;'()*+,/;\u0026lt;=\u0026gt;?@[\\]^`{|}~. Il ne peut pas non plus commencer par un chiffre, un tiret (-) ou un point.\nLes nœuds sont définis au moyen de balises, qui peuvent être de trois types :\nBalise ouvrante : \u0026lt;noeud\u0026gt; Balise fermante : \u0026lt;/noeud\u0026gt; Balise vide : \u0026lt;noeud/\u0026gt; Un nœud texte s\u0026rsquo;insère entre une balise ouvrante et une balise fermante. Une balise ouvrante doit obligatoirement être suivie d\u0026rsquo;une balise fermante du même nom. Une balise vide ne peut pas contenir de nœud texte.\nToutes les balises peuvent être complétées d\u0026rsquo;un ou plusieurs attributs, sous forme de combinaison clé/valeur : \u0026lt;balise attribut=\u0026quot;valeur\u0026quot; autre-attribut='autre-valeur'\u0026gt;. Chaque attribut est unique à l\u0026rsquo;échelle d\u0026rsquo;une balise.\nLe respect strict des normes de syntaxe est obligatoire en XML. Un document non conforme générera des erreurs bloquantes dans les traitements automatisés. Exemple de document XML valide \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;document\u0026gt;\u0026lt;!-- nœud document --\u0026gt; \u0026lt;element titre=\u0026#34;1er élément\u0026#34;\u0026gt; \u0026lt;enfant\u0026gt;Nœud texte\u0026lt;/enfant\u0026gt; \u0026lt;enfant\u0026gt; \u0026lt;vide attribut1=\u0026#34;valeur\u0026#34; attribut2=\u0026#34;valeur\u0026#34; /\u0026gt; \u0026lt;/enfant\u0026gt; \u0026lt;/element\u0026gt; \u0026lt;element titre=\u0026#34;2ème élément\u0026#34;\u0026gt;Nœud texte\u0026lt;/element\u0026gt; \u0026lt;/document\u0026gt; Simplifications en HTML 5 Par rapport à la norme XML stricte, HTML 5 introduit quelques simplifications :\nLe prologue se limite à une unique ligne \u0026lt;!DOCTYPE html\u0026gt; Cette balise est la seule à avoir un nom en majuscule, toutes les autres sont en minuscule. Une balise ouvrante peut rester vide, et la balise fermante devient alors facultative. Les balises vides peuvent donc être remplacées par des balises ouvrantes, rendant le / facultatif. Dans le cas où un document HTML 5 n\u0026rsquo;est pas parfaitement valide, la plupart des navigateurs vont quand même tenter de l\u0026rsquo;interpréter au mieux, au lieu de produire une erreur. Structure de base d\u0026rsquo;une page HTML 5 Une page HTML 5 est un document XML, enregistré sous la forme d\u0026rsquo;un fichier à l\u0026rsquo;extension .html (ou .htm), dont le nœud document s\u0026rsquo;appelle html, et contenant 2 enfants nommés head et body. Le document HTML 5 minimal est donc le suivant :\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Métadonnées de l\u0026rsquo;en-tête L\u0026rsquo;élément \u0026lt;head\u0026gt; représente l\u0026rsquo;en-tête du document HTML. Ses enfants permettent de préciser des métadonnées telles que le titre, l\u0026rsquo;auteur, la description, l\u0026rsquo;encodage. C\u0026rsquo;est également dans le \u0026lt;head\u0026gt; que sont déclarés des liens vers des fichiers supplémentaires nécessaires au bon affichage de la page : feuille de style CSS, scripts JavaScript\u0026hellip;\nLe titre de la page web, tel qu\u0026rsquo;affiché dans les onglets des navigateurs web, est défini par un nœud texte à l\u0026rsquo;intérieur d\u0026rsquo;une paire de balises \u0026lt;title\u0026gt;.\nLes autres métadonnées sont définies à l\u0026rsquo;aide des balises meta dont l\u0026rsquo;attribut name indique le nom de la métadonnée et l\u0026rsquo;attribut content précise sa valeur. Cette règle admet deux exceptions (pour des raisons de compatibilité historique avec d\u0026rsquo;anciennes versions de HTML) :\nla métadonnée sur la langue de la page web est indiquée sous la forme d\u0026rsquo;un attribut du nœud document html : \u0026lt;html lang=\u0026quot;fr\u0026quot;\u0026gt; la métadonnée sur l\u0026rsquo;encodage de la page web est indiquée par une balise meta ayant pour seul attribut charset Enfin, les liens vers d\u0026rsquo;autres fichiers sont précisés dans des balises link dont l\u0026rsquo;attribut rel précise le type de fichier lié et l\u0026rsquo;attribut href son emplacement.\nExemple d\u0026rsquo;en-tête HTML 5 avec métadonnées \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;fr\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Titre de la page web\u0026lt;/title\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;author\u0026#34; content=\u0026#34;Auteur de la page web\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;Description de la page web\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;keywords\u0026#34; content=\u0026#34;Mot Clé 1, Mot Clé 2, Mot Clé 3\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;style.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Structure sémantique du corps L\u0026rsquo;élément \u0026lt;body\u0026gt; représente le corps du document web. C\u0026rsquo;est dans cet élément que s\u0026rsquo;insère tout le contenu de la page web, au moyen des balises définies dans la norme HTML 5.\nL\u0026rsquo;introduction de HTML 5 s\u0026rsquo;est accompagnée d\u0026rsquo;une vaste réflexion autour de la notion de web sémantique, dans l\u0026rsquo;idée de rendre les standards du web davantage porteurs de sens vis à vis du contenu qu\u0026rsquo;ils décrivent. L\u0026rsquo;objectif est de faciliter le travail d\u0026rsquo;indexation par les moteurs de recherche et les outils d\u0026rsquo;analyse automatique de documents, ainsi que d\u0026rsquo;améliorer l\u0026rsquo;accessibilité numérique en précisant où se trouve le contenu le plus important.\nCette évolution passe par l\u0026rsquo;introduction de nouvelles balises permettant de subdiviser en blocs les pages web, en fonction du contenu de ces blocs. Ces balises sont les suivantes, dans l\u0026rsquo;ordre où elles apparaissent généralement sur une page web :\nBalise Sens sémantique Règles d\u0026rsquo;usage main Contenu principal Limité à un par page web, ne peut pas être un enfant d\u0026rsquo;une autre balise sémantique section Division cohérente d\u0026rsquo;un contenu ou de la page Peut être parent ou enfant d\u0026rsquo;autres balises sémantiques au sein de la même page web article Contenu indépendant Permet de délimiter un contenu ayant du sens indépendamment du reste de la page web aside Contenu indépendant et d\u0026rsquo;importance secondaire Peut être utilisé pour préciser qu\u0026rsquo;un contenu n\u0026rsquo;est pas directement lié au contenu principal nav Menu de navigation Permet de définir un menu principal de navigation, permettant de naviguer entre les contenus et avec d\u0026rsquo;autres pages du site menu Menu secondaire Définit un menu d\u0026rsquo;importance secondaire, permettant par exemple d\u0026rsquo;accéder à des options, mais pas de naviguer sur le site header En-tête de bloc Peut aussi bien être utilisé pour délimiter l\u0026rsquo;en-tête de la page web que celui d\u0026rsquo;un bloc sémantique footer Pied de page de bloc Peut aussi bien être utilisé pour délimiter le pied de page de la page web que celui d\u0026rsquo;un bloc sémantique L\u0026rsquo;usage de ces balises n\u0026rsquo;est pas obligatoire, mais fortement recommandé pour améliorer les performances en référencement et accessibilité de la page web. Il permet également de simplifier l\u0026rsquo;écriture des feuilles de style. Exemple de document HTML 5 avec métadonnées et structure sémantique \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;fr\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Page multi-articles\u0026lt;/title\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;author\u0026#34; content=\u0026#34;Auteur de la page web\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;Description de la page web\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;keywords\u0026#34; content=\u0026#34;HTML5, Sémantique\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;style.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;header\u0026gt; \u0026lt;nav\u0026gt;\u0026lt;/nav\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;main\u0026gt; \u0026lt;menu\u0026gt;\u0026lt;/menu\u0026gt; \u0026lt;article\u0026gt; \u0026lt;header\u0026gt;\u0026lt;/header\u0026gt; \u0026lt;section\u0026gt;\u0026lt;/section\u0026gt; \u0026lt;section\u0026gt;\u0026lt;/section\u0026gt; \u0026lt;section\u0026gt;\u0026lt;/section\u0026gt; \u0026lt;footer\u0026gt;\u0026lt;/footer\u0026gt; \u0026lt;/article\u0026gt; \u0026lt;article\u0026gt; \u0026lt;section\u0026gt;\u0026lt;/section\u0026gt; \u0026lt;section\u0026gt;\u0026lt;/section\u0026gt; \u0026lt;/article\u0026gt; \u0026lt;aside\u0026gt; \u0026lt;section\u0026gt;\u0026lt;/section\u0026gt; \u0026lt;section\u0026gt;\u0026lt;/section\u0026gt; \u0026lt;/aside\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;footer\u0026gt;\u0026lt;/footer\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Dans cet exemple, cette page web en français commence par un en-tête contenant le menu principal de navigation.\nLe contenu principal s\u0026rsquo;ouvre ensuite, et se compose de deux articles indépendants et d\u0026rsquo;un article complémentaire. Un menu secondaire permet d\u0026rsquo;accéder à des options supplémentaires.\nLe premier article possède lui aussi un en-tête (une introduction), trois sections distinctes (des sous parties) et un pied de page (une conclusion). Le second article, plus simple, se découpe simplement en deux sections. Enfin, l\u0026rsquo;article annexe se compose lui aussi de deux sections.\nLa page se conclut par un pied de page général, situé en dehors du contenu principal.\n","date":"May 7, 2024","hero":"/images/default-hero.jpg","permalink":"https://maxence.collard-lagalle.me/posts/formations/html-css/html-syntax-structure/","summary":"Syntaxe de HTML 5 La syntaxe de HTML 5 est basée sur celle de XML, mais admet quelques simplifications. Une version stricte, nommée XHTML, a existé en parallèle de HTML 4, avant d\u0026rsquo;être abandonnée par le W3C le 2 juillet 2009.\nÉléments de XML Un document XML est un fichier texte structuré. Ce document est un arbre, composé de nœuds.\nIl est introduit par un prologue, précisant des informations techniques telles que la version de la norme XML ou l\u0026rsquo;encodage utilisé.","tags":["HTML 5"],"title":"Syntaxe HTML 5 et structure sémantique d'une page web"},{"categories":["Formation"],"contents":"Un flux de travail (en anglais, workflow) est une façon standardisée d\u0026rsquo;organiser les branches d\u0026rsquo;un projet Git. Leur utilisation permet de bénéficier de méthodes éprouvées pour s\u0026rsquo;adapter à des modes usuels d\u0026rsquo;organisation et d\u0026rsquo;outils spécifiquement conçus pour leur prise en charge.\nGitFlow GitFlow est un flux de travail qui a été proposé par Vincent Driessen en 2010. Son objectif est de permettre en parallèle la maintenance d\u0026rsquo;une version de production et l\u0026rsquo;élaboration d\u0026rsquo;une version de développement.\nGitFlow s\u0026rsquo;appuie sur 5 familles de branches :\nmain : branche principale et permanente, chaque version de main est vouée à être mise en production develop : branche permanente, soutenant la version de développement feature : branches éphémères tirées de develop, dédiées au développement d\u0026rsquo;une fonctionnalité release : branches éphémères tirées de develop, servant aux ultimes correctifs avant mise en production hotfix : branches éphémères tirées de main, permettant la correction de bugs en production Exemple gitGraph commit tag: \"v1.0.0\" branch develop order: 3 branch feature/US1 order: 4 commit commit checkout main branch hotfix/1.0.1 order: 1 commit checkout main merge hotfix/1.0.1 tag: \"v1.0.1\" checkout develop merge hotfix/1.0.1 branch feature/US2 order: 5 commit commit checkout feature/US1 commit checkout develop merge feature/US1 branch release/1.1.0 order: 2 commit commit checkout main merge release/1.1.0 tag: \"v1.1.0\" checkout develop merge release/1.1.0 checkout feature/US2 commit Utilisation de l\u0026rsquo;extension GitFlow Les installations de Git pour Windows depuis la version 2.6.4 incluent directement une extension permettant une prise en charge simplifiée de GitFlow.\nPour macOS et Linux, un paquet nommé git-flow est généralement disponible pour installer cette extension. L\u0026rsquo;extension se manipule ensuite en ligne de commandes au travers de l\u0026rsquo;instruction git flow\nInitialisation L\u0026rsquo;initialisation de GitFlow s\u0026rsquo;effectue en utilisant la sous-commande init de git flow :\ngit flow init Git demande alors des informations sur les noms à utiliser pour les différentes branches et les tags de version :\nWhich branch should be used for bringing forth production releases? Branch name for production releases: [main] Branch name for \u0026#34;next release\u0026#34; development: [develop] How to name your supporting branch prefixes? Feature branches? [feature/] Release branches? [release/] Hotfix branches? [hotfix/] Version tag prefix? [] v Développer une fonctionnalité Pour démarrer une branche de fonctionnalité, il suffit d\u0026rsquo;utiliser l\u0026rsquo;instruction feature start :\ngit flow feature start \u0026lt;nom_de_la_fonction\u0026gt; Git va alors automatiquement créer une branche à partir de develop et l\u0026rsquo;activer. Il est ensuite possible de publier cette branche sur un dépôt distant :\ngit flow feature publish \u0026lt;nom_de_la_fonction\u0026gt; Il est également possible de récupérer une branche de fonctionnalité à partir d\u0026rsquo;un dépôt distant :\ngit flow feature pull origin \u0026lt;nom_de_la_fonction\u0026gt; Enfin, une fois le développement d\u0026rsquo;une fonctionnalité terminée, il est nécessaire de la clôturer :\ngit flow feature finish \u0026lt;nom_de_la_fonction\u0026gt; Cette commande fusionne la branche de fonctionnalité dans develop, supprime la branche devenue inutile et réactive develop. Réaliser une version de production ou un correctif Les mêmes commandes que pour les fonctionnalités peuvent s\u0026rsquo;utiliser pour les versions de production ou les correctifs, en remplaçant le mot-clé feature par release ou hotfix :\ngit flow release start \u0026lt;numero_de_version\u0026gt; \u0026lt;commit_de_depart\u0026gt; Le numéro de version saisi sera ensuite apposé comme un tag lors de la fusion dans main. Il est possible de faire partir une release (resp., hotfix) de n\u0026rsquo;importe quel commit de develop (resp., main). OneFlow OneFlow est une évolution de GitFlow proposée par Adam Ruka en 2017. Son objectif est de proposer un historique plus clair et lisible sur le long terme en ne se basant que sur une branche perpétuelle.\nUtiliser OneFlow de manière efficace implique de manipuler les tags et les squash ou les rebase.\nOneFlow s\u0026rsquo;appuie sur une branche principale : main qui sert de branche de développement On dérive de cette branche trois types de branches éphémères :\nfeature pour les fonctionnalités release pour les mises en production hotfix pour les correctifs sur la production Les branches release et hotfix s\u0026rsquo;achèvent par un tag qui permet d\u0026rsquo;identifier leur dernier commit comme étant prêt à être mis en production.\nExemple gitGraph commit tag: \"v1.0.0\" branch hotfix/1.0.1 order: 1 branch feature/US1 order: 3 commit commit checkout main checkout hotfix/1.0.1 commit checkout main merge hotfix/1.0.1 tag: \"v1.0.1\" branch feature/US2 order: 4 commit commit checkout feature/US1 commit checkout main merge feature/US1 branch release/1.1.0 order: 2 commit commit checkout main merge release/1.1.0 tag: \"v1.1.0\" checkout feature/US2 commit Pour améliorer encore la lisibilité de l\u0026rsquo;historique, il est conseillé de rebase les branches de fonctionnalité sur la dernière version étiquetée de main avant de les fusionner :\ngitGraph commit tag: \"v1.0.0\" branch hotfix/1.0.1 order: 1 checkout main checkout hotfix/1.0.1 commit checkout main merge hotfix/1.0.1 tag: \"v1.0.1\" branch feature/US1 order: 3 commit commit commit checkout main merge feature/US1 branch release/1.1.0 order: 2 commit commit checkout main merge release/1.1.0 tag: \"v1.1.0\" branch feature/US2 order: 4 commit commit commit checkout main merge feature/US2 GitLab Flow GitLab Flow est une autre approche alternative à GitFlow qui a été proposé par les équipes de développement de GitLab en 2016.\nSon approche combine celle des branches de fonctionnalité avec une prise en charge de multiples environnements de déploiement. Elle est donc plus particulière adaptée aux grandes organisations qui ont un système informatique complexe.\nDans GitLab Flow, main est une branche perpétuelle qui sert au développement. On en découle des branches de fonctionnalités éphémères. Il existe également autant de branches permanentes que d\u0026rsquo;environnements de déploiement. Les fonctionnalités et les correctifs se déplacent entre les branches par fusion.\nExemple gitGraph commit branch qualification order: 3 commit checkout main branch production order: 5 commit tag: \"v1.0.0\" checkout main branch feature/US1 order: 1 commit commit checkout production branch hotfix/1.0.1 order: 4 checkout hotfix/1.0.1 commit commit commit checkout production merge hotfix/1.0.1 tag: \"v1.0.1\" checkout qualification merge hotfix/1.0.1 checkout main merge qualification branch feature/US2 order: 2 commit commit checkout feature/US1 commit checkout main merge feature/US1 checkout qualification merge main checkout production merge qualification tag: \"v1.1.0\" checkout feature/US2 commit checkout main merge feature/US2 checkout qualification merge main Le GitLab Flow permet de maintenir plusieurs versions de recette et de production en parallèle, et de maîtriser les fonctionnalités proposées. Mais il demande de faire preuve de vigilance dans les opérations de fusion pour s\u0026rsquo;assurer qu\u0026rsquo;un correctif fait à un endroit a bien été répercuté partout où il devait l\u0026rsquo;être.\nLa lisibilité de l\u0026rsquo;historique peut également être améliorée en utilisant des rebase.\nRemarques Il existe bien d\u0026rsquo;autres flux de travail pour Git et aucun n\u0026rsquo;a vocation à être une solution universelle qui s\u0026rsquo;adapte à tous les environnements.\nIl est même tout à fait possible de concevoir un flux \u0026ldquo;sur mesure\u0026rdquo; pour répondre à un besoin spécifique. Le plus important est surtout que toute l\u0026rsquo;équipe qui travaille sur un projet ait connaissance du flux en vigueur et l\u0026rsquo;applique.\n","date":"April 16, 2023","hero":"/images/default-hero.jpg","permalink":"https://maxence.collard-lagalle.me/posts/formations/git/workflows/","summary":"Un flux de travail (en anglais, workflow) est une façon standardisée d\u0026rsquo;organiser les branches d\u0026rsquo;un projet Git. Leur utilisation permet de bénéficier de méthodes éprouvées pour s\u0026rsquo;adapter à des modes usuels d\u0026rsquo;organisation et d\u0026rsquo;outils spécifiquement conçus pour leur prise en charge.\nGitFlow GitFlow est un flux de travail qui a été proposé par Vincent Driessen en 2010. Son objectif est de permettre en parallèle la maintenance d\u0026rsquo;une version de production et l\u0026rsquo;élaboration d\u0026rsquo;une version de développement.","tags":["Git"],"title":"Flux de travail usuels"},{"categories":["Formation"],"contents":"Dépôt local Un dépôt (ou \u0026ldquo;repository\u0026rdquo; en anglais) est l\u0026rsquo;endroit où Git stocke l\u0026rsquo;historique des versions d\u0026rsquo;un projet de développement. Il existe deux types de dépôts dans Git :\nUn dépôt local est une copie du dépôt sur l\u0026rsquo;ordinateur local d\u0026rsquo;un développeur Un dépôt distant est un dépôt hébergé sur un serveur distant, accessible via Internet. Créer un dépôt local Pour créer un dépôt local avec Git, il suffit de se positionner en ligne de commandes (via cd) dans un dossier à transformer en dépôt et d\u0026rsquo;utiliser la commande :\ngit init Ceci va créer un sous-dossier .git (caché sous UNIX, pour le voir : ls -la) qui sert notamment à stocker l\u0026rsquo;historique. Il n\u0026rsquo;est pas utile d\u0026rsquo;y accéder en utilisation courante.\nIl est possible de consulter l\u0026rsquo;état d\u0026rsquo;un dépôt grâce à la commande :\ngit status Pour un dépôt nouvellement créé dans un dossier vide, elle doit proposer la sortie suivante : On branch main No commits yet nothing to commit (create/copy files and use \u0026#34;git add\u0026#34; to track) Manipulation des fichiers Avec Git, un fichier peut être présent dans 3 zones distinctes :\nle répertoire de travail l\u0026rsquo;index le dépôt git status permet de connaître l\u0026rsquo;état de chaque fichier\nRépertoire de travail Le répertoire de travail correspond au contenu du dossier sur l\u0026rsquo;ordinateur du développeur. Par défaut, aucun fichier n\u0026rsquo;est suivi par Git. Par exemple, après la création d\u0026rsquo;un fichier exemple.txt, la commande git status donne la sortie suivante :\nOn branch main No commits yet Untracked files: (use \u0026#34;git add \u0026lt;file\u0026gt;...\u0026#34; to include in what will be committed) exemple.txt nothing added to commit but untracked files present (use \u0026#34;git add\u0026#34; to track) classDiagram direction RL Index..Répertoire Dépôt..Index class Répertoire{ +exemple.txt a4d584 } class Index{ } class Dépôt{ } Index Pour demander à Git de commencer à suivre un fichier, il faut l\u0026rsquo;ajouter à l\u0026rsquo;index. L\u0026rsquo;index est une zone tampon entre le répertoire de travail et le dépôt qui rassemble l\u0026rsquo;ensemble des modifications prêtes à être ajoutées à un commit.\nConcrètement, on indexe un fichier avec la commande suivante :\ngit add \u0026lt;fichier\u0026gt; On peut utiliser un . à la place du nom du fichier pour demander à Git d\u0026rsquo;indexer tout le répertoire de travail. Une fois un fichier indexé, il est prêt à être inclus à un commit. La sortie de git status reflète cette évolution :\nOn branch main No commits yet Changes to be committed: (use \u0026#34;git rm --cached \u0026lt;file\u0026gt;...\u0026#34; to unstage) new file: exemple.txt Il est possible de désindexer un fichier sans le supprimer avec la commande :\ngit rm --cached \u0026lt;fichier\u0026gt; L\u0026rsquo;option -f peut être utilisée à la place de --cached pour supprimer totalement le fichier. Un fichier indexé devient également suivi par Git, ce qui revient à dire que son hash est recalculé à chaque modification du répertoire de travail. S\u0026rsquo;il est à nouveau modifié alors qu\u0026rsquo;il est toujours dans l\u0026rsquo;index, Git détectera cette modification :\nOn branch main No commits yet Changes to be committed: (use \u0026#34;git rm --cached \u0026lt;file\u0026gt;...\u0026#34; to unstage) new file: exemple.txt Changes not staged for commit: (use \u0026#34;git add \u0026lt;file\u0026gt;...\u0026#34; to update what will be committed) (use \u0026#34;git restore \u0026lt;file\u0026gt;...\u0026#34; to discard changes in working directory) modified: exemple.txt classDiagram direction RL Index\u003c|--Répertoire : git add Dépôt..Index class Répertoire{ +exemple.txt a4d584 } class Index{ +exemple.txt a4d584 } class Dépôt{ } Dépôt À partir du moment où un fichier est présent dans au moins un commit, il est alors enregistré dans le dépôt.\nUn commit représente une version spécifique d\u0026rsquo;un projet à un moment donné. C\u0026rsquo;est l\u0026rsquo;unité de base de l\u0026rsquo;historique d\u0026rsquo;un dépôt. Il contient une copie des fichiers du projet, ainsi qu\u0026rsquo;un message décrivant les modifications apportées depuis la version précédente.\nUn commit est identifié par un hash (SHA-1) calculé par Git sur la base du hash de l\u0026rsquo;ensemble des fichiers du projet. On l\u0026rsquo;abrège souvent à ses premiers caractères (par exemple, 1d0703d3).\nUn commit est composé de l\u0026rsquo;ensemble des fichiers du dernier commit de la branche actuelle (HEAD) auxquels sont appliquées les modifications de l\u0026rsquo;index. Pour effectuer un commit, on utilise la commande suivante :\ngit commit -m \u0026#34;Message de commit\u0026#34; Une fois qu\u0026rsquo;un commit est réalisé, il devient le nouveau commit de référence (HEAD) à partir duquel Git vérifie si un fichier a été modifié.\nQuand une modification a été incluse dans un commit, elle sort de l\u0026rsquo;index, comme en témoigne la sortie de git status :\nOn branch main nothing to commit, working tree clean classDiagram direction RL Index..Répertoire Dépôt\u003c|--Index : git commit class Répertoire{ +exemple.txt a4d584 } class Index{ } class Dépôt{ +exemple.txt a4d584 } Messages de commit Le message de commit sera lisible par tous les développeurs du projet et sera retranscrit dans l\u0026rsquo;historique, d\u0026rsquo;où l\u0026rsquo;importance qu\u0026rsquo;il retrace fidèlement le contenu du commit. Il est donc crucial que les modifications apportées par un commit forment un ensemble cohérent. Il vaut souvent mieux séparer un gros commit difficile à résumer en plusieurs petits commits.\nEn utilisant la syntaxe git commit -m, la longueur du message est limitée à 49 caractères.\nModifier le dernier commit Il est possible de corriger un oubli sur le dernier commit ou de modifier son message avec l\u0026rsquo;option --amend :\ngit commit --amend -m \u0026#34;Nouveau message de commit\u0026#34; Pour ne pas modifier le message de commit, il faut ajouter l\u0026rsquo;option --no-edit à la place de -m. Les modifications actuellement contenues dans l\u0026rsquo;index seront alors fusionnées avec celles du dernier commit, ce qui va créer un nouveau commit qui remplace l\u0026rsquo;ancien.\nAutres manipulations sur les fichiers Git propose des commandes permettant de retranscrire d\u0026rsquo;autres manipulations usuelles sur les fichiers :\nDéplacer ou renommer un fichier : git mv \u0026lt;ancien_nom\u0026gt; \u0026lt;nouveau_nom\u0026gt; Supprimer un fichier : git rm \u0026lt;fichier_a_supprimer\u0026gt; Ces modifications seront ajoutées à l\u0026rsquo;index et devront être commitées pour être retranscrites dans le dépôt.\nIgnorer des fichiers Il est également possible de demander à Git d\u0026rsquo;ignorer de manière permanente des fichiers :\nPour cela, il faut créer à la racine du dépôt un fichier nommé .gitignore (sans extension), qui continent la liste des fichiers et dossiers à ignorer. Le fichier .gitignore doit être commité pour être pris en compte.\nIl existe des outils en ligne comme gitignore.io pour avoir des listes usuelles de fichiers à ignorer selon les types de projets.\nConsulter l\u0026rsquo;historique d\u0026rsquo;un dépôt gitGraph commit id: \"3b1d805\" commit id: \"6a2b687\" commit id: \"49eb5d0\" commit id: \"8f7308f\" commit id: \"30d524c\" tag: \"HEAD\" La commande git log permet d\u0026rsquo;obtenir l\u0026rsquo;historique complet des commits d\u0026rsquo;un dépôt, dans l\u0026rsquo;ordre chronologique inversé :\ngit log commit 30d524c6603ed1982bdf82eb54d7215a00b22328 (HEAD -\u0026gt; main) Author: Maxence Collard-Lagalle \u0026lt;maxence@collard-lagalle.me\u0026gt; Date: Fri Apr 14 12:31:00 2023 +0200 Suppression du fichier exemple.txt devenu inutile commit 8f7308fc1099a44fb25af05c3ee7c6a7ca17f111 Author: Maxence Collard-Lagalle \u0026lt;maxence@collard-lagalle.me\u0026gt; Date: Fri Apr 14 12:30:31 2023 +0200 Correction d\u0026#39;une coquille dans le poème commit 49eb5d06716e1f0668681b417a884b3d808bacda Author: Maxence Collard-Lagalle \u0026lt;maxence@collard-lagalle.me\u0026gt; Date: Fri Apr 14 12:30:02 2023 +0200 Le poème est plutôt un haiku commit 6a2b687e994b4c8341adc6542c313cb860dad452 Author: Maxence Collard-Lagalle \u0026lt;maxence@collard-lagalle.me\u0026gt; Date: Fri Apr 14 12:29:24 2023 +0200 Ajout d\u0026#39;un poème sur l\u0026#39;informatique commit 3b1d805510f43af8e7b9da97d0bf44dca127a9d1 Author: Maxence Collard-Lagalle \u0026lt;maxence@collard-lagalle.me\u0026gt; Date: Thu Apr 13 16:56:41 2023 +0200 Exemple de commit avec un fichier unique L\u0026rsquo;option --oneline permet d\u0026rsquo;obtenir un affichage compact, avec une seule ligne par commit :\ngit log --oneline 30d524c (HEAD -\u0026gt; main) Suppression du fichier exemple.txt devenu inutile 8f7308f Correction d\u0026#39;une coquille dans le poème 49eb5d0 Le poème est plutôt un haiku 6a2b687 Ajout d\u0026#39;un poème sur l\u0026#39;informatique 3b1d805 Exemple de commit avec un fichier unique L\u0026rsquo;option --stat permet de connaître le nombre de modifications effectuées sur chaque fichier :\ngit log --stat commit 30d524c6603ed1982bdf82eb54d7215a00b22328 (HEAD -\u0026gt; main) Author: Maxence Collard-Lagalle \u0026lt;maxence@collard-lagalle.me\u0026gt; Date: Fri Apr 14 12:31:00 2023 +0200 Suppression du fichier exemple.txt devenu inutile exemple.txt | 0 1 file changed, 0 insertions(+), 0 deletions(-) commit 8f7308fc1099a44fb25af05c3ee7c6a7ca17f111 Author: Maxence Collard-Lagalle \u0026lt;maxence@collard-lagalle.me\u0026gt; Date: Fri Apr 14 12:30:31 2023 +0200 Correction d\u0026#39;une coquille dans le poème haiku.txt | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-) commit 49eb5d06716e1f0668681b417a884b3d808bacda Author: Maxence Collard-Lagalle \u0026lt;maxence@collard-lagalle.me\u0026gt; Date: Fri Apr 14 12:30:02 2023 +0200 Le poème est plutôt un haiku poeme.txt =\u0026gt; haiku.txt | 0 1 file changed, 0 insertions(+), 0 deletions(-) commit 6a2b687e994b4c8341adc6542c313cb860dad452 Author: Maxence Collard-Lagalle \u0026lt;maxence@collard-lagalle.me\u0026gt; Date: Fri Apr 14 12:29:24 2023 +0200 Ajout d\u0026#39;un poème sur l\u0026#39;informatique poeme.txt | 3 +++ 1 file changed, 3 insertions(+) commit 3b1d805510f43af8e7b9da97d0bf44dca127a9d1 Author: Maxence Collard-Lagalle \u0026lt;maxence@collard-lagalle.me\u0026gt; Date: Thu Apr 13 16:56:41 2023 +0200 Exemple de commit avec un fichier unique exemple.txt | 0 1 file changed, 0 insertions(+), 0 deletions(-) Il est possible de combiner les options --oneline et --stat.\nFiltrer l\u0026rsquo;historique git log supporte de nombreuses options permettant de filtrer l\u0026rsquo;historique selon plusieurs critères :\n-n \u0026lt;nombre\u0026gt; : n derniers commits --before=\u0026quot;AAAA-MM-JJ HH:mm\u0026quot; : commits plus anciens qu\u0026rsquo;une date --after=\u0026quot;AAAA-MM-JJ HH:mm\u0026quot; : commits plus récents qu\u0026rsquo;une date --author=\u0026quot;Nom\u0026quot; : commits signés par un auteur -- \u0026lt;fichier\u0026gt; : commits affectant un fichier Rechercher à l\u0026rsquo;intérieur des commits L\u0026rsquo;option -S permet de rechercher une chaîne de caractères et d\u0026rsquo;afficher la liste des commits contenant cette chaîne à l\u0026rsquo;intérieur des fichiers qu\u0026rsquo;ils modifient :\ngit log -S \u0026#34;Chaîne à rechercher\u0026#34; Il existe également l\u0026rsquo;option -G pour faire une recherche par expression régulière (regex). Consulter l\u0026rsquo;historique détaillé d\u0026rsquo;un fichier La commande git blame permet de connaître l\u0026rsquo;historique détaillé d\u0026rsquo;un fichier en précisant de quel commit viennent chacune de ses lignes dans leur rédaction actuelle :\ngit blame \u0026lt;fichier\u0026gt; La sortie de cette commande affiche chaque ligne du fichier dans le terminal, précédé de l\u0026rsquo;identifiant du commit ayant introduit ou modifié cette ligne, du nom de l\u0026rsquo;auteur et de la date de ce commit : git blame haiku.txt 6a2b687e poeme.txt (Maxence Collard-Lagalle 2023-04-14 12:29:24 +0200 1) Un clic malencontreux 8f7308fc haiku.txt (Maxence Collard-Lagalle 2023-04-14 12:30:31 +0200 2) Fichier important supprimé 6a2b687e poeme.txt (Maxence Collard-Lagalle 2023-04-14 12:29:24 +0200 3) Sauvegarde ? Jamais fait. Comparer deux commits Grâce à git diff, il est possible d\u0026rsquo;effectuer des comparaisons entre deux états d\u0026rsquo;un fichier.\nSi la commande est utilisée sans paramètres, la comparaison s\u0026rsquo;effectue entre le répertoire de travail et l\u0026rsquo;index. Il est possible de donner en paramètres un identifiant de commit pour comparer ce commit au répertoire de travail, ou deux identifiants de commit pour les comparer. Par exemple, il est possible de comparer le commit 49eb5d0 à l\u0026rsquo;état actuel du dépôt, c\u0026rsquo;est-à-dire au commit HEAD:\ngit diff 49eb5d0 HEAD diff --git a/exemple.txt b/exemple.txt deleted file mode 100644 index e69de29..0000000 diff --git a/haiku.txt b/haiku.txt index b3c75e6..2ba1e15 100644 --- a/haiku.txt +++ b/haiku.txt @@ -1,3 +1,3 @@ Un clic malencontreux -Fichier portant supprimé +Fichier important supprimé Sauvegarde ? Jamais fait. \\ No newline at end of file git diff permet également de vérifier les modifications qui seront incluses dans le commit en cours de préparation en comparant l\u0026rsquo;index et le dernier commit : git diff --staged Rechercher un commit défectueux L\u0026rsquo;outil git bisect permet de retrouver un commit défectueux (par exemple, ayant introduit un bug) par recherche dichotomique :\nIl faut tout d\u0026rsquo;abord l\u0026rsquo;initialiser en lui précisant notamment l\u0026rsquo;identifiant d\u0026rsquo;un \u0026ldquo;mauvais commit\u0026rdquo; (ayant le problème) et d\u0026rsquo;un \u0026ldquo;bon commit\u0026rdquo; (n\u0026rsquo;ayant pas le problème) :\ngit bisect start git bisect bad \u0026lt;mauvais commit, vide pour commit actuel\u0026gt; git bisect good \u0026lt;bon commit\u0026gt; Git va alors sélectionner un commit situé entre ces deux bornes et remettre le répertoire de travail à l\u0026rsquo;état de ce commit :\nBisecting: X revisions left to test after this (roughly Y steps) Après avoir vérifié manuellement si le bug est toujours présent, il faut indiquer à Git le résultat de cette vérification avec l\u0026rsquo;une de ces commandes :\ngit bisect good si le bug est absent git bisect bad si le bug est présent Lorsque Git a réussi à repérer le commit ayant introduit le bug, il indique son identifiant dans la sortie du terminal, ainsi que les détails du commit :\n8f7308fc1099a44fb25af05c3ee7c6a7ca17f111 is the first bad commit commit 8f7308fc1099a44fb25af05c3ee7c6a7ca17f111 ... Pour sortir du mode de recherche et revenir à l\u0026rsquo;état initial du répertoire de travail, il faut réinitialiser git bisect via :\ngit bisect reset Annuler un commit Git propose un mécanisme de revert permettant d\u0026rsquo;annuler les modifications d\u0026rsquo;un commit. Il consiste à écrire un nouveau commit qui continent l\u0026rsquo;inverse des modifications du commit original. Ce mécanisme s\u0026rsquo;utilise avec la commande suivante :\ngit revert \u0026lt;commit_a_annuler\u0026gt; Ce nouveau commit s\u0026rsquo;inscrit dans l\u0026rsquo;historique au moment où il est créé, comme n\u0026rsquo;importe quel autre commit. Revenir à un état antérieur de l\u0026rsquo;historique git reset permet de ramener un dépôt à un état antérieur en supprimant tous les commits réalisés après un commit donné :\ngit reset \u0026lt;dernier_commit_a_conserver\u0026gt; Avec --soft, le répertoire de travail est remis à l\u0026rsquo;état du commit ciblé et les modifications réalisées depuis sont remises dans l\u0026rsquo;index. Sans option, les modifications restent dans le répertoire de travail, mais pas dans l\u0026rsquo;index. --hard réinitialise définitivement le répertoire de travail et l\u0026rsquo;index. Supprimer totalement un fichier de l\u0026rsquo;historique Dans le cas où un fichier a été commité par erreur, il est possible de demander à Git de réécrire son historique en le filtrant pour supprimer totalement ce fichier :\ngit filter-branch --index-filter \\ \u0026#39;git rm -rf --cached --ignore-unmatch \u0026lt;chemin_vers_le_fichier\u0026gt;\u0026#39; HEAD Sur un système avec Python\u0026gt;=3.5 installé, l\u0026rsquo;extension git filter-repo fournit une commande simplifiée : git filter-repo --invert-paths --path \u0026lt;chemin_vers_le_fichier\u0026gt; Tags Les tags sont un moyen simple d\u0026rsquo;associer une étiquette (généralement, un numéro de version) à un commit. Une fois qu\u0026rsquo;ils sont positionnés, les tags peuvent être utilisés à la place des identifiants de commits dans presque toutes les commandes de Git.\nAjouter un tag Ajouter un tag s\u0026rsquo;effectue avec la commande :\ngit tag \u0026lt;nom_du_tag\u0026gt; \u0026lt;commit\u0026gt; Si aucun identifiant de commit n\u0026rsquo;est précisé, le tag s\u0026rsquo;appliquera au dernier commit (HEAD). Il est possible d\u0026rsquo;ajouter des informations détaillées à un tag (par exemple, un changelog) en ajoutant l\u0026rsquo;option -a. Manipuler les tags Git peut fournir la liste des tags d\u0026rsquo;un dépôt :\ngit tag --list Il est également possible d\u0026rsquo;afficher les détails d\u0026rsquo;un tag, notamment sa date et son auteur :\ngit tag show \u0026lt;nom_du_tag\u0026gt; Enfin, il est possible de supprimer un tag :\ngit tag -d \u0026lt;nom_du_tag\u0026gt; Utiliser plusieurs branches Avec celle de commit, la notion de branche et l\u0026rsquo;un des concepts clés de Git. La maîtriser permet de considérablement simplifier le travail collaboratif.\nUne branche est un enchaînement de commits parallèle à la version principale du projet. Par convention, la version principale est la branche main (anciennement master).\nTechniquement, une branche est un tag dynamique qui se déplace automatiquement sur le dernier commit en date de sa lignée.\nHEAD est le tag du dernier commit de la branche actuellement active. gitGraph commit commit branch feature commit commit checkout main commit tag: \"main\" checkout feature commit tag: \"feature, HEAD\" Sur cet exemple, feature est la branche active. Lister les branches d\u0026rsquo;un dépôt Pour lister les branches d\u0026rsquo;un dépôt, la commande à utiliser est git branch :\ngit branch * feature main La branche actuellement active est signalée par l\u0026rsquo;astérisque (*) L\u0026rsquo;option -v permet d\u0026rsquo;afficher en plus l\u0026rsquo;identifiant et le message du dernier commit de chaque branche Créer une branche La création de branche s\u0026rsquo;effectue également grâce à git branch :\ngit branch \u0026lt;nom_de_la_branche\u0026gt; \u0026lt;commit_initial\u0026gt; Si aucun commit initial n\u0026rsquo;est précisé, HEAD sera le point de départ de la nouvelle branche. Le nom d\u0026rsquo;une branche :\nne peut contenir que des caractères ASCII ne doit pas commencer par un tiret ne doit pas contenir deux points consécutifs ne doit pas se terminer par un slash, mais peut en contenir pour créer une hiérarchie Changer de branche git switch permet de changer la branche active :\ngit switch \u0026lt;branche_a_activer\u0026gt; Pour les versions de Git antérieures à 2.23.0, la commande était git checkout \u0026lt;branche\u0026gt; Tous les nouveaux commits seront affiliés à la branche activée Changer de branche :\nModifie le répertoire de travail et l\u0026rsquo;index Préserve les modifications en cours Déplace l\u0026rsquo;étiquette HEAD Mettre de côté les modifications en cours Il peut arriver que l\u0026rsquo;on souhaite temporairement mettre de côté des modifications en cours, par exemple pour travailler en urgence sur un problème.\nGit rend cela possible grâce à la commande :\ngit stash Cette commande stocke temporairement les modifications du répertoire de travail et de l\u0026rsquo;index, et remet le répertoire de travail à l\u0026rsquo;état du dernier commit de la branche. L\u0026rsquo;option --include-untracked permet d\u0026rsquo;également inclure les fichiers non suivis par Git. Pour réappliquer dans la branche active les dernières modifications mises de côté, la commande est :\ngit stash pop Il est également possible de supprimer des modifications sans les appliquer :\ngit stash drop Enfin, il est possible d\u0026rsquo;accumuler plusieurs stashes, qui peuvent être listés :\ngit stash list Fusionner deux branches Fusionner des branches permet d\u0026rsquo;intégrer des modifications faites sur une branche dans une autre. C\u0026rsquo;est une opération cruciale, car elle permet par exemple d\u0026rsquo;intégrer à une version des productions des fonctionnalités développées en parallèle.\nLa fusion doit être initiée en ayant activé la branche cible (celle qui doit recevoir les modifications) La fusion s\u0026rsquo;effectue avec la commande git merge, en précisant la branche source des modifications :\ngit merge \u0026lt;branche_source\u0026gt; gitGraph commit commit id: \"1-8a4f40a\" branch feature commit commit checkout main commit checkout feature commit tag: \"feature\" checkout main merge feature id: \"6-1a59d24\" tag: \"main, HEAD\" Git recherche l\u0026rsquo;ancêtre commun des branches à fusionner (ici, 1-8a4f40a) et y injecte les modifications issues de chaque branche, pour créer un nouveau commit dans la branche active, dit commit de merge. Ici, le commit de merge a l\u0026rsquo;identifiant 6-1a59d24. classDiagram direction LR Commit1..Commit4 Commit1..Commit5 Commit4..Commit6 Commit5..Commit6 class Commit1 { fichier1.txt 41ad58 fichier2.txt 1efc25 fichier3.txt 690a41 } class Commit4 { fichier1.txt 914da0 fichier2.txt 1efc25 fichier3.txt 690a41 } class Commit5 { fichier1.txt 41ad58 fichier2.txt ea451d fichier3.txt 690a41 } class Commit6 { fichier1.txt 914da0 fichier2.txt ea451d fichier3.txt 690a41 } Fusion Fast-Forward Si le commit de merge calculé par Git est égal au dernier commit de la branche source (il a le même hash), alors Git évite de créer un doublon. À la place, il procède à une fusion fast-forward en déplaçant l\u0026rsquo;étiquette de la branche cible sur le commit de la branche source.\ngitGraph commit commit branch feature commit commit checkout main merge feature tag: \"main, feature, HEAD\" Conflits de fusion Un conflit de fusion survient si la même zone d\u0026rsquo;un même fichier a été modifiée entre l\u0026rsquo;ancêtre commun d\u0026rsquo;une part et les branches source et cible simultanément d\u0026rsquo;autre part.\nUne zone d\u0026rsquo;un fichier correspond généralement à une ligne et son voisinage immédiat. Dans ce cas, Git suspend la fusion et le développeur doit trancher manuellement le conflit en indiquant quelle version conserver.\nGit signale l\u0026rsquo;échec de la fusion automatique et les conflits dans la sortie de la commande git merge : Auto-merging sonnet.txt CONFLICT (add/add): Merge conflict in sonnet.txt Automatic merge failed; fix conflicts and then commit the result. La commande git status précise également qu\u0026rsquo;une fusion est en cours et la liste des fichiers en conflit : On branch main You have unmerged paths. (fix conflicts and run \u0026#34;git commit\u0026#34;) (use \u0026#34;git merge --abort\u0026#34; to abort the merge) Unmerged paths: (use \u0026#34;git add \u0026lt;file\u0026gt;...\u0026#34; to mark resolution) both added: sonnet.txt no changes added to commit (use \u0026#34;git add\u0026#34; and/or \u0026#34;git commit -a\u0026#34;) Résoudre les conflits de fusion Pour résoudre les conflits, le développeur doit ouvrir dans un éditeur de texte les fichiers concernés. Git a inséré dans le fichier des informations sur les modifications effectuées dans les branches source et cible sous le format suivant :\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD Version de la branche cible ======= Version de la branche source \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; source Si une zone est vide, c\u0026rsquo;est qu\u0026rsquo;elle n\u0026rsquo;existe pas dans la branche concernée. Il est possible, et souvent utile, d\u0026rsquo;afficher également des informations sur le contenu de l\u0026rsquo;ancêtre commun via une option de configuration de Git :\ngit config --global merge.conflictstyle diff3 Dans ce cas, les informations sur les modifications adopteront la présentation suivante : \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD Version de la branche cible ||||||| merged common ancestor Version de l\u0026#39;ancêtre commun ======= Version de la branche source \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; source Une fois le fichier ouvert dans l\u0026rsquo;éditeur de texte, il est possible de reprendre à l\u0026rsquo;identique l\u0026rsquo;une des versions proposées, ou d\u0026rsquo;en écrire une nouvelle.\nLorsque tous les conflits d\u0026rsquo;un fichier sont résolus (il n\u0026rsquo;y a plus de marqueurs ajoutés par Git), le fichier doit être indexé (git add)\nAprès la résolution du dernier fichier, l\u0026rsquo;index peut finalement être commité (git commit), ce qui permettra de finaliser le commit de merge et la fusion des branches.\nExemple Fichier sonnet.txt avant résolution des conflits : \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD ======= Quand l\u0026#39;écran s\u0026#39;allume, je tape sur mon clavier, Et je me sens l\u0026#39;âme d\u0026#39;un héros bien armé, Mais parfois c\u0026#39;est la guerre, les bugs sont aguerris, Et je dois me résoudre à un peu de répit. \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; alt-sonnet Sur mon écran s\u0026#39;affichent des pixels brillants, Des octets bien alignés, des programmes ardents, Des virus dévastateurs, des spams envahissants, Des câbles emmêlés, des bugs persistants. \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD Je pianote sur mon clavier, tel un virtuose, Je créé des dossiers, des fichiers grandioses, Je navigue sur le web, je me sens comme un rose, Mais parfois je m\u0026#39;emmêle, je suis un peu névrose. Je rêve de machines, de logiciels parfaits, De claviers qui répondent à mes moindres souhaits, De souris magiques qui font tout à ma place. ======= Je rêve de machines, de logiciels parfaits, D\u0026#39;ordinateurs qui pensent, qui lisent dans mes traits, De robots programmés, qui m\u0026#39;apportent le café. \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; alt-sonnet Mais en attendant, je m\u0026#39;en remets à mon ordinateur, Avec ses programmes parfois un peu farfelus, Et je souris, car je sais qu\u0026#39;il est mon sauveur. Fichier sonnet.txt après résolution des conflits : Quand l\u0026#39;écran s\u0026#39;allume, je tape sur mon clavier, Et je me sens l\u0026#39;âme d\u0026#39;un héros bien armé, Mais parfois c\u0026#39;est la guerre, les bugs sont aguerris, Et je dois me résoudre à un peu de répit. Je pianote sur mon clavier, tel un virtuose, Je créé des dossiers, des fichiers grandioses, Je navigue sur le web, je me sens comme un rose, Mais parfois je m\u0026#39;emmêle, je suis un peu névrose. Je rêve de machines, de logiciels parfaits, D\u0026#39;ordinateurs qui pensent, qui lisent dans mes traits, De robots programmés, qui m\u0026#39;apportent le café. Mais en attendant, je m\u0026#39;en remets à mon ordinateur, Avec ses programmes parfois un peu farfelus, Et je souris, car je sais qu\u0026#39;il est mon sauveur. Le premier conflit a été résolu en conservant la version de alt-sonnet et le second par une ré-écriture mélangeant les deux versions et supprimant un texte commun\nLa commande git status permet de confirmer que la fusion est terminée après commit des modifications : On branch main nothing to commit, working tree clean En cas de difficultés, il est possible d\u0026rsquo;abandonner une fusion pour la recommencer ultérieurement ou avec d\u0026rsquo;autres branches : git merge --abort Linéariser un historique Pour des raisons de lisibilité, on peut vouloir rendre aussi linéaire que possible l\u0026rsquo;historique d\u0026rsquo;une branche, en particulier de la branche principale.\nGit propose des approches permettant de récupérer tout ou partie des modifications d\u0026rsquo;une autre branche tout en conservant un historique clair.\nRécupérer un commit : le cherry pick Git permet de récupérer dans une branche les modifications apportées par un commit réalisé dans une autre branche avec la commande git cherry-pick :\ngit cherry-pick \u0026lt;identifiant_commit\u0026gt; En cas de conflit, la même mécanique de résolution des conflits que pour la fusion de branches sera déclenchée gitGraph commit commit branch feature commit id: \"2-7ed128b\" tag: \"feature\" checkout main commit cherry-pick id: \"2-7ed128b\" commit commit tag: \"main, HEAD\" Le commit 2-7ed128b, initialement présent dans la branche feature a été intégré sans fusion à l\u0026rsquo;historique de la branche main. Réécrire une branche dans une autre : le rebase Le rebase est une autre façon de fusionner deux branches. Au lieu d\u0026rsquo;écrire un commit de merge, le rebase consiste à intégrer tous les commits de la branche source dans la branche cible.\nUne fois positionné dans la branche cible, la commande git rebase permet d\u0026rsquo;effectuer cette opération :\ngit rebase \u0026lt;branche_source\u0026gt; Les commits de la branche source seront réécrits dans la branche cible dans le même ordre, immédiatement après l\u0026rsquo;ancêtre commun.\nLes conflits devront être résolus après chaque commit, pour permettre à l\u0026rsquo;opération de continuer :\nLes fichiers en conflit doivent être ajoutés à l\u0026rsquo;index avec git add Puis, il faut demander à Git de continuer le rebase avec la commande : git rebase --continue Comparaison entre merge et rebase Exemple d\u0026rsquo;historique après un git merge : gitGraph commit id: \"0-71af11d\" commit id: \"1-8a4f40a\" branch feature commit id: \"2-9358c74\" commit id: \"3-8151b64\" checkout main commit id: \"4-09aa3e3\" checkout feature commit id: \"5-af29107\" tag: \"feature\" checkout main merge feature id: \"6-1a59d24\" commit id: \"7-46ccbcb\" tag: \"main, HEAD\" Le même historique après un git rebase: gitGraph commit id: \"0-71af11d\" commit id: \"1-8a4f40a\" commit id: \"2-9358c74\" commit id: \"3-8151b64\" commit id: \"5-af29107\" commit id: \"4-09aa3e3\" commit id: \"6-1a59d24\" commit id: \"7-46ccbcb\" tag: \"main, HEAD\" Simplifier l\u0026rsquo;historique : le squash Le squash permet à Git de rassembler plusieurs commits en un seul au moment d\u0026rsquo;une fusion, ce qui est une autre façon de linéariser un historique tout en le simplifiant.\nLa manière la plus simple d\u0026rsquo;y parvenir est d\u0026rsquo;ajouter l\u0026rsquo;option --squash à git merge:\ngit merge --squash \u0026lt;branche_source\u0026gt; Cette opération écrit dans l\u0026rsquo;index la combinaison de tous les commits de la branche source. Il faut ensuite effectuer un commit classique pour terminer la fusion. Supprimer une branche L\u0026rsquo;option -d de git branch permet de supprimer une branche :\ngit branch -d \u0026lt;branche_a_supprimer\u0026gt; La suppression ne doit être effectuée que si la branche est devenue inutile :\nParce qu\u0026rsquo;elle a été fusionnées dans une autre Parce que ses modifications ont été abandonnées (l\u0026rsquo;option devient alors -D par sécurité) Une fois la branche supprimée, ses commits non fusionnés sont définitivement perdus\n","date":"April 16, 2023","hero":"/images/default-hero.jpg","permalink":"https://maxence.collard-lagalle.me/posts/formations/git/repo-management/","summary":"Dépôt local Un dépôt (ou \u0026ldquo;repository\u0026rdquo; en anglais) est l\u0026rsquo;endroit où Git stocke l\u0026rsquo;historique des versions d\u0026rsquo;un projet de développement. Il existe deux types de dépôts dans Git :\nUn dépôt local est une copie du dépôt sur l\u0026rsquo;ordinateur local d\u0026rsquo;un développeur Un dépôt distant est un dépôt hébergé sur un serveur distant, accessible via Internet. Créer un dépôt local Pour créer un dépôt local avec Git, il suffit de se positionner en ligne de commandes (via cd) dans un dossier à transformer en dépôt et d\u0026rsquo;utiliser la commande :","tags":["Git"],"title":"Gérer un dépôt Git"},{"categories":["Formation"],"contents":"Git a été créé par Linus Torvalds, le créateur du système d\u0026rsquo;exploitation Linux, en 2005. Il a été conçu pour être un VCS décentralisé, capable de gérer efficacement les grands projets open source tels que le développement du noyau Linux. Git a rapidement gagné en popularité auprès de la communauté du développement de logiciels en raison de sa rapidité, de sa facilité d\u0026rsquo;utilisation et de sa flexibilité.\nGit, en tant que VCS décentralisé (ou distribué), permet à chaque développeur de disposer d\u0026rsquo;une copie complète de l\u0026rsquo;historique des modifications et du code source sur leur ordinateur. Ils peuvent dont travailler en mode déconnecté (sans accès à Internet ou à un serveur centralisé) et ont accès à toutes les versions du code source. Cela signifie qu\u0026rsquo;il n\u0026rsquo;y a pas de point unique de défaillance, car le référentiel de code est distribué sur plusieurs machines.\nGitLab est une plateforme web open source de gestion de projets de développement de logiciels qui utilise Git pour la gestion de versions de code source. GitLab fournit des fonctionnalités de collaboration supplémentaires telles que des tableaux de bord de suivi de projets, des outils de gestion de bugs ou bien encore des outils d\u0026rsquo;intégration continue. Il fournit également des fonctionnalités de gestion d\u0026rsquo;équipe telles que la gestion des utilisateurs, des permissions et des groupes de projets.\nPourquoi utiliser un système de gestion de versions ? Un système de gestion de versions (VCS) est un outil permettant de suivre les modifications apportées au code source d\u0026rsquo;un projet au fil du temps.\nSon utilisation permet de :\ntravailler ensemble sur un même code source conserver l\u0026rsquo;historique des modifications apportées revenir à des versions précédentes résoudre les conflits entre les modifications apportées par différents développeurs Quels sont les avantages ? Sécurité Sauvegarde automatique : les développeurs n\u0026rsquo;ont pas besoin de se rappeler de faire des sauvegardes régulières de leur code, car le VCS s\u0026rsquo;en charge automatiquement. Facilité de récupération : si un développeur supprime accidentellement un fichier important ou introduit une erreur dans le code, il peut facilement revenir à une version précédente du code grâce à l\u0026rsquo;historique des modifications stocké dans le VCS. Travail en équipe Collaboration efficace : chaque développeur peut travailler sur sa propre branche de code et fusionner ses modifications avec la branche principale une fois qu\u0026rsquo;il est satisfait de son travail. Gestion des conflits : si deux développeurs ont modifié le même fichier de code, le VCS les alertera et les aidera à résoudre le conflit en fusionnant les modifications de manière appropriée. Documentation Historique des modifications : les développeurs peuvent facilement accéder à des versions antérieures du code et voir qui a effectué quelles modifications, quand et pourquoi. Commentaires : lorsqu\u0026rsquo;un développeur effectue des modifications avec un VCS, il peut ajouter un message pour décrire les modifications apportées au code. ","date":"April 16, 2023","hero":"/images/default-hero.jpg","permalink":"https://maxence.collard-lagalle.me/posts/formations/git/introduction/","summary":"Git a été créé par Linus Torvalds, le créateur du système d\u0026rsquo;exploitation Linux, en 2005. Il a été conçu pour être un VCS décentralisé, capable de gérer efficacement les grands projets open source tels que le développement du noyau Linux. Git a rapidement gagné en popularité auprès de la communauté du développement de logiciels en raison de sa rapidité, de sa facilité d\u0026rsquo;utilisation et de sa flexibilité.\nGit, en tant que VCS décentralisé (ou distribué), permet à chaque développeur de disposer d\u0026rsquo;une copie complète de l\u0026rsquo;historique des modifications et du code source sur leur ordinateur.","tags":["Git","GitLab"],"title":"Introduction"},{"categories":["Formation"],"contents":"L\u0026rsquo;intégration continue (Continuous Integration, CI) est une pratique de développement logiciel qui consiste à tester et à construire automatiquement un projet chaque fois qu\u0026rsquo;un développeur soumet un changement dans le code source. Cette pratique vise à détecter rapidement les erreurs de code et à garantir que le code est fonctionnel et prêt à être déployé.\nUn pipeline d\u0026rsquo;intégration continue est un processus automatisé qui permet de construire, tester et déployer un projet. Il s\u0026rsquo;agit d\u0026rsquo;une série d\u0026rsquo;étapes configurées pour être exécutées automatiquement par un runner lorsque des événements surviennent un dépôt (comme un commit).\nGitLab CI/CD GitLab CI/CD est l\u0026rsquo;outil permettant de configurer des pipelines d\u0026rsquo;intégration continue dans un projet géré sur GitLab.\nIl s\u0026rsquo;appuie sur les runners GitLab Runner qui sont une technologie open source pouvant être déployée sur sa propre installation.\nConfigurer un pipeline GitLab CI/CD La configuration d\u0026rsquo;un pipeline GitLab CI/CD repose sur la rédaction d\u0026rsquo;un fichier de configuration nommé \u0026ldquo;manifeste\u0026rdquo;.\nPar convention, le manifeste se nomme .gitlab-ci.yml et doit être placé à la racine du dépôt. Le manifeste est écrit en YAML, un langage de sérialisation de données généralement utilisé pour écrire des fichiers de configuration.\nExemple de syntaxe YAML # Commentaire cle: valeur parent: enfant: valeur liste: - option 1 - option 2 niveau1: niveau2: niveau3a: valeur a niveau3b: | 1 choix 1 2 choix 2 niveau3c: - liste Jobs Un pipeline GitLab CI/CD est composé de jobs, qui sont un ensemble d\u0026rsquo;instructions de ligne de commande (un script) qui doivent être exécutées par le runner :\nnom-du-job: script: - commande 1 - commande 2 Par défaut, tous les jobs définis dans le manifeste s\u0026rsquo;exécutent simultanément.\nImages Les runners GitLab reposent sur une technologie de conteneurisation compatible avec Docker.\nIl est donc possible de demander à un job de s\u0026rsquo;exécuter à partir d\u0026rsquo;une image Docker, pour éviter d\u0026rsquo;avoir à configurer à la main un environnement :\nbuild: image: maven/3-eclipse-temurin-21 # Maven 3 + Java 21 script: - mvn package Étapes Il est possible de regrouper des jobs par étapes, nommées stages qui s\u0026rsquo;exécuteront de manière séquencée.\nTous les jobs d\u0026rsquo;une même étape s\u0026rsquo;exécutent simultanément, puis GitLab passe aux jobs de l\u0026rsquo;étape suivante. Le manifeste doit donc contenir une déclaration des étapes du pipeline, puis chaque job doit être rattaché à une étape.\nstages: - build - test build: image: maven/3-eclipse-temurin-21 stage: build script: - mvn package unit-test: image: maven/3-eclipse-temurin-21 stage: test script: - mvn test Règles de lancement conditionnel Par défaut, GitLab CI/CD exécute le pipeline à chaque fois qu\u0026rsquo;un commit est envoyé.\nIl est possible de fixer des conditions pour modifier ce comportement, par exemple pour n\u0026rsquo;exécuter certaines étapes que dans certaines branches. Le mot-clé rules permet de fixer ces règles de lancement conditionnel pour un job.\nAu sein du bloc rules, il est possible de fixer une ou plusieurs conditions avec if. Il faut et il suffit qu\u0026rsquo;une des conditions soit respectée pour qu\u0026rsquo;un job puisse être exécuté.\nPlusieurs variables usuelles sont disponibles pour rédiger ces conditions :\n$CI_COMMIT_BRANCH : branche du commit $CI_COMMIT_TAG : tags du commit $CI_COMMIT_TITLE : message du commit deploy: image: maven/3-eclipse-temurin-21 script: - mvn deploy rules: - if: $CI_COMMIT_BRANCH == \u0026#34;main\u0026#34; - if: $CI_COMMIT_TITLE =~ /Deploy.*/ Dans cet exemple, le job deploy ne s\u0026rsquo;exécutera que si le pipeline est déclenché depuis la branche main ou si le message de commit débute par \u0026ldquo;Deploy\u0026rdquo;. Modes d\u0026rsquo;exécution Les modes d\u0026rsquo;exécution sont une autre façon de conditionner le lancement d\u0026rsquo;un job.\nPar défaut, les jobs d\u0026rsquo;une étape ne se lancent que si tous les jobs de l\u0026rsquo;étape précédente se sont terminés avec succès. L\u0026rsquo;option when permet de modifier ce comportement.\nwhen peut être combiné avec rules pour créer des scénarios d\u0026rsquo;exécution complexes. Plusieurs modes d\u0026rsquo;exécution sont disponibles :\non_success : seulement si tous les jobs de l\u0026rsquo;étape précédente réussissent (mode par défaut) on_failure : seulement si au moins un job de l\u0026rsquo;étape précédente a échoué always : toujours exécuter ce job never : ne jamais exécuter ce job (utile en combinaison avec rules) manual : ne pas exécuter automatiquement ce job, mais permettre de le lancer manuellement Il est également possible de rendre l\u0026rsquo;échec d\u0026rsquo;un job non bloquant avec allow-failure: true\ndeploy: image: maven/3-eclipse-temurin-21 script: - mvn deploy rules: - if: $CI_COMMIT_BRANCH == \u0026#34;main\u0026#34; - if: $CI_COMMIT_TITLE =~ /Deploy.*/ when: manual Désormais, le job deploy ne se lancera plus automatiquement si le commit commence par \u0026ldquo;Deploy\u0026rdquo;, mais une option permettant de le lancer manuellement sera proposée à la place. Cache Le cache permet de sauvegarder des fichiers/dossiers d\u0026rsquo;un runner et de les partager tout au long du pipeline. Il est détruit une fois le pipeline terminé.\nL\u0026rsquo;utilisation du cache permet par exemple d\u0026rsquo;éviter de rebuild plusieurs fois un même projet entre les différentes étapes du pipeline.\nUn bloc cache doit préciser les fichiers et dossiers concernés dans le sous-bloc paths. Par défaut, le job commencera par récupérer les fichiers du cache au début de son exécution, et écrira les modifications à la fin. Ce comportement peut être modifié avec l\u0026rsquo;option policy :\npull : récupérer le cache, mais ne pas écrire les modifications push : ne pas récupérer le cache, mais écrire les modifications stages: - build - verify build: image: maven/3-eclipse-temurin-21 stage: build script: - mvn package cache: paths: - target policy: push À l\u0026rsquo;issue de l\u0026rsquo;exécution de l\u0026rsquo;étape build, le dossier target sera mis en cache pour être réutilisé à l\u0026rsquo;étape verify. Artefacts Les artefacts ont un fonctionnement proche du cache, à ceci près qu\u0026rsquo;ils sont préservés à l\u0026rsquo;issue du pipeline. Ils peuvent donc être réutilisés dans un autre pipeline, publiés ou bien encore téléchargés.\nLes artefacts se configurent grâce à un bloc artifacts qui se décompose en plusieurs sous-blocs :\npaths permet de définir les fichiers et dossiers du runner à rendre disponibles name définit le nom de l\u0026rsquo;archive zip qui contiendra l\u0026rsquo;artefact expire_in fixe la durée de vie de l\u0026rsquo;artefact. Par défaut, cette durée s\u0026rsquo;exprime en secondes, mais il est possible de préciser une autre unité. stages: - build - verify build: image: maven/3-eclipse-temurin-21 stage: build script: - mvn package artifacts: paths: - target name: build expire_in: 1 week Ce job rendra le dossier target disponible au téléchargement dans un fichier nommé build.zip. Ce fichier sera conservé par GitLab pendant 1 semaine. Superviser un pipeline GitLab Dès qu\u0026rsquo;un pipeline est configuré sur un dépôt GitLab, une icône apparaît en regard de chaque commit. Cette icône indique le résultat du pipeline :\nUne coche verte indique un pipeline réussi Un point d\u0026rsquo;exclamation jaune indique une réussite avec des avertissements Une croix rouge signale un pipeline en échec Un rond bleu signifie que le pipeline est en cours d\u0026rsquo;exécution Une flèche grise invite à exécuter une étape en mode manuel Détails d\u0026rsquo;un pipeline En cliquant sur l\u0026rsquo;icône, on peut accéder à l\u0026rsquo;interface détaillée du pipeline :\nChaque colonne correspond à une étape Chaque pastille correspond à un job, avec son résultat d\u0026rsquo;exécution Détails d\u0026rsquo;un job GitLab permet d\u0026rsquo;accéder aux détails d\u0026rsquo;exécution d\u0026rsquo;un job, et notamment aux logs du runner.\nCette interface permet également de télécharger les artefacts. ","date":"April 16, 2023","hero":"/images/default-hero.jpg","permalink":"https://maxence.collard-lagalle.me/posts/formations/git/gitlab-ci/","summary":"L\u0026rsquo;intégration continue (Continuous Integration, CI) est une pratique de développement logiciel qui consiste à tester et à construire automatiquement un projet chaque fois qu\u0026rsquo;un développeur soumet un changement dans le code source. Cette pratique vise à détecter rapidement les erreurs de code et à garantir que le code est fonctionnel et prêt à être déployé.\nUn pipeline d\u0026rsquo;intégration continue est un processus automatisé qui permet de construire, tester et déployer un projet.","tags":["GitLab"],"title":"Introduction à GitLab CI"},{"categories":["Formation"],"contents":"Installation de Git Linux Git est généralement installé directement dans la plupart des distributions Linux. Sinon, il est installable dans un terminal au travers du gestionnaire de paquets de la distribution :\nDebian : sudo apt install git-all Fedora : sudo dnf install git-all macOS Sur macOS Mavericks (10.9) ou ultérieur, Git est fourni au travers des Xcode Command Line Tools. Il suffit d\u0026rsquo;essayer de lancer Git dans un terminal via une commande comme git --version pour que macOS propose de l\u0026rsquo;installer avec d\u0026rsquo;autres outils de développement. Sinon, il est possible d\u0026rsquo;utiliser Homebrew via brew install git ou de télécharger l\u0026rsquo;installateur.\nWindows Sur Windows, l\u0026rsquo;installation de Git est possible grâce au projet Git for Windows qui fournit Git avec un émulateur de ligne de commande Bash. Une façon simple de l\u0026rsquo;installer de manière automatisée est d\u0026rsquo;utiliser Scoop pour installer Git avec la commande scoop install git.\nSinon, il est possible de télécharger l\u0026rsquo;installateur via le site officiel ou avec WinGet. Certains écrans demandent une attention particulière :\nChoix de l\u0026rsquo;éditeur de texte par défaut Vim est un bon choix pour des utilisateurs habitués à utiliser des programmes en ligne de commande. Sinon, il vaut mieux utiliser un éditeur avec une interface graphique comme Notepad++ ou VS Code. Nom de la branche initiale dans les nouveaux dépôts Il est désormais recommandé pour travailler avec des outils tiers de sélectionner l\u0026rsquo;option Override the default branch name for new repositories et de choisir main comme nom par défaut.\nInscription de Git dans les variables d\u0026rsquo;environnement Git from the command line and also from 3rd-party software permet d\u0026rsquo;utiliser Git avec d\u0026rsquo;autres logiciels installés sur l\u0026rsquo;ordinateur, notamment des IDE. Use Git and optional Unix tools from the Command Prompt donne accès à des commandes Unix dans la ligne de commande Windows. Choix de l\u0026rsquo;exécutable SSH Depuis Windows 10, un client SSH est directement intégré à Windows. Il est donc possible de l\u0026rsquo;utiliser en choisissant Use external OpenSSH pour mutualiser les configurations.\nChoix du magasin de certificats HTTPS L\u0026rsquo;option Use the native Windows Secure Channel library permet de bénéficier des certificats de sécurité déployés dans un cadre professionnel via un domaine Active Directory.\nConversion des fins de ligne À configurer en fonction des habitudes de l\u0026rsquo;équipe :\nCheckout Windows-style, commit Unix-style line endings est recommandé sous Windows pour un projet multi-plateformes. Checkout as-is, commit Unix-style line endings peut s\u0026rsquo;utiliser si toute l\u0026rsquo;équipe travaille avec des logiciels adaptés au monde Unix. Comportement par défaut du pull À configurer en fonction des habitudes de l\u0026rsquo;équipe. En l\u0026rsquo;absence de préférence, l\u0026rsquo;option Default (fast-forward or merge) est plus simple à appréhender dans un premier temps.\nConfiguration de Git Niveaux de configuration flowchart TD subgraph system subgraph global subgraph local node[Configuration] end end end De manière générale, la configuration se définit à l\u0026rsquo;échelle de l\u0026rsquo;utilisateur, donc au niveau global. Le niveau local peut également être utilisé pour des paramètres spécifiques à un projet. Configuration minimale La configuration de Git s\u0026rsquo;effectue en ligne de commandes (CLI) dans un terminal. Il faut au minimum configurer un nom d\u0026rsquo;auteur et une adresse e-mail :\ngit config --global user.name \u0026#34;Prénom Nom\u0026#34; git config --global user.email \u0026#34;utilisateur@domaine.tld\u0026#34; Dans un cadre professionnel, la configuration d\u0026rsquo;un proxy peut également être nécessaire :\ngit config --global http.proxy \u0026#34;http://proxy.domaine.tld:port\u0026#34; git config --global https.proxy \u0026#34;http://proxy.domaine.tld:port\u0026#34; git config --global no.proxy \u0026#34;exception1,exception2,localhost\u0026#34; Consulter la configuration active La commande git config permet également de connaître la valeur actuelle d\u0026rsquo;un paramètre. Il est même possible de consulter toute la configuration actuellement active grâce à la commande suivante :\ngit config --list L\u0026rsquo;option --show-origin permet d\u0026rsquo;indiquer en plus si une configuration vient du niveau system, global ou local.\nObtenir de l\u0026rsquo;aide Git propose une aide intégrée (en anglais) sur son fonctionnement et la syntaxe de ses commandes. Cette aide est accessible via la commande :\ngit help \u0026lt;commande\u0026gt; En cas d\u0026rsquo;utilisation de git help sans préciser de nom de commande, Git écrira dans le terminal une liste des commandes les plus usuelles.\n","date":"April 16, 2023","hero":"/images/default-hero.jpg","permalink":"https://maxence.collard-lagalle.me/posts/formations/git/first-steps/","summary":"Installation de Git Linux Git est généralement installé directement dans la plupart des distributions Linux. Sinon, il est installable dans un terminal au travers du gestionnaire de paquets de la distribution :\nDebian : sudo apt install git-all Fedora : sudo dnf install git-all macOS Sur macOS Mavericks (10.9) ou ultérieur, Git est fourni au travers des Xcode Command Line Tools. Il suffit d\u0026rsquo;essayer de lancer Git dans un terminal via une commande comme git --version pour que macOS propose de l\u0026rsquo;installer avec d\u0026rsquo;autres outils de développement.","tags":["Git"],"title":"Premiers pas"},{"categories":["Formation"],"contents":"Une forge logicielle est une plateforme web qui permet aux développeurs de gérer leur code source, de collaborer sur des projets de développement, de suivre les bugs et les problèmes, et de déployer des applications. Outre le suivi de version basé sur Git, les forges logicielles incluent des fonctionnalités comme la création de merge requests, la gestion de bugs, la documentation, la gestion des tâches, les tests automatisés et les déploiements continus.\nIl existe de nombreuses forges logicielles, les plus populaires aujourd\u0026rsquo;hui étant GitHub, GitLab et Bitbucket. Cette formation va s\u0026rsquo;intéresser à GitLab, mais la plupart des fonctionnalités qui seront présentées se retrouvent sous des formes similaires sur les autres plateformes. GitLab a l\u0026rsquo;intérêt d\u0026rsquo;avoir une version open source qui permet de l\u0026rsquo;installer de manière indépendante dans son propre environnement de production.\nDépôt distant Un dépôt distant est un dépôt Git hébergé sur un serveur, permettant de centraliser et de redistribuer les modifications d\u0026rsquo;un projet à toute l\u0026rsquo;équipe. Les forges logicielles incluent un serveur Git pour l\u0026rsquo;hébergement de dépôts distants.\nÉtablir une connexion sécurisée SSH Git peut utiliser plusieurs protocoles pour dialoguer avec un dépôt distant. Les plus fréquemment utilisés sont HTTPS et SSH. GitLab prend en charge ces deux protocoles : HTTPS via l\u0026rsquo;utilisation de jetons d\u0026rsquo;accès et SSH via un système de clés asymétriques.\nÀ l\u0026rsquo;usage, SSH est généralement le choix le plus simple et performant pour travailler de manière régulière depuis le même ordinateur. Sa configuration demande de générer une paire de clés de chiffrement, et de communiquer la clé publique à GitLab.\nGénérer une paire de clés SSH La génération d\u0026rsquo;une paire de clés SSH s\u0026rsquo;effectue à partir du terminal de l\u0026rsquo;ordinateur avec la commande ssh-keygen :\nssh-keygen -t ed25519 ed25519 est l\u0026rsquo;algorithme de génération des clés, s\u0026rsquo;appuyant sur l\u0026rsquo;algèbre des courbes elliptiques. Il existe également rsa qui repose sur la théorie des nombres premiers.\nUne fois la commande lancée, le terminal pose plusieurs questions :\nGenerating public/private ed25519 key pair. Enter file in which to save the key (~/.ssh/id_ed25519): Appuyer sur \u0026ldquo;Entrée\u0026rdquo; pour valider le chemin par défaut, ou préciser un chemin Enter passphrase (empty for no passphrase): Enter same passphrase again: Si l\u0026rsquo;ordinateur n\u0026rsquo;est pas partagé et correctement sécurisé, il est possible de ne pas saisir de mot de passe.\nSinon, le mot de passe saisi ici devra être entré à chaque utilisation de la clé.\nUne fois les informations saisies, le terminal confirme la réussite de la création de la clé en donnant ses informations d\u0026rsquo;identification :\nYour identification has been saved in ~/.ssh/id_ed25519 Your public key has been saved in ~/.ssh/id_ed25519.pub The key fingerprint is: SHA256:nmqJx3Wutsb8fe75FUDLYiQqJk4E6ZeWe1X6FdvDM+w \u0026lt;Utilisateur\u0026gt;@\u0026lt;Hostname\u0026gt; The key\u0026#39;s randomart image is: +--[ED25519 256]--+ | .o. . . . | | .. ..o.o . | |. ooo .o o*+ | | .o=o .o .o.B. | | o.. . S . . +. | | . . ..o. E .| | .o =oo .| | . =.= .. ...| | o.oo+. .++..| +----[SHA256]-----+ La clé publique doit alors être renseignée dans GitLab pour pouvoir l\u0026rsquo;utiliser comme serveur de dépôt distant.\nIl faut pour cela se connecter à GitLab et accéder à la page de configuration des clés SSH de GitLab :\nL\u0026rsquo;empreinte à saisir dans le champ clé peut être obtenue en lisant le fichier de la clé publique dont l\u0026rsquo;emplacement a été donné précédemment : cat ~/.ssh/id_ed25519.pub Le champ \u0026ldquo;Titre\u0026rdquo; peut être rempli librement avec un nom permettant de reconnaître la clé. Le type d\u0026rsquo;utilisation \u0026ldquo;Authentification et Signature\u0026rdquo; permet d\u0026rsquo;également utiliser la clé pour signer de manière sécurisée ses commits. La date d\u0026rsquo;expiration est une sécurité facultative pour forcer le renouvellement ponctuel des clés. Créer un dépôt distant La création d\u0026rsquo;un dépôt distant commence par la création d\u0026rsquo;un nouveau projet GitLab. Dans un premier temps, il est conseillé de choisir \u0026ldquo;Create blank project\u0026rdquo; pour démarrer d\u0026rsquo;un dépôt vide.\nLa case \u0026ldquo;Initialiser le dépôt avec un README\u0026rdquo; ne doit PAS être cochée si un dépôt local existe déjà. Relier un dépôt local existant à un dépôt distant git remote permet de gérer les dépôts distants. Par convention, le dépôt distant principal d\u0026rsquo;un projet s\u0026rsquo;appelle origin.\nPour déclarer un nouveau dépôt distant dans un dépôt local existant et lui envoyer tout le contenu actuel, trois commandes sont nécessaires : git remote add origin git@gitlab.com:\u0026lt;nom-utilisateur\u0026gt;/\u0026lt;slug-projet\u0026gt;.git git push -u origin --all git push -u origin --tags Cloner localement un dépôt distant Si le projet a d\u0026rsquo;abord été créé comme un dépôt distant, ou pour récupérer le code d\u0026rsquo;un projet déjà existant, Git permet également le cloner un dépôt distant. Le développeur récupère alors une copie locale de l\u0026rsquo;intégralité des fichiers et de l\u0026rsquo;historique du projet.\nLa commande à utiliser est git clone :\ngit clone git@gitlab.com:\u0026lt;nom-utilisateur\u0026gt;/\u0026lt;slug-projet\u0026gt;.git Le dépôt distant est automatiquement configuré comme origin. Synchroniser le dépôt local et le dépôt distant Puisque le dépôt local est une copie intégrale du dépôt distant, le développeur peut travailler en mode déconnecté. Néanmoins, il est important de pouvoir régulièrement se synchroniser pour récupérer les modifications faites par les autres et envoyer les siennes.\nEnvoyer des modifications La commande git push permet d\u0026rsquo;envoyer les modifications (les commits) effectuées localement dans une branche :\ngit push Git recherchera une branche portant le même nom que la branche locale sur origin et y enverra les modifications locales. Si la branche a été créé localement, l\u0026rsquo;option --set-upstream permet de demander à Git de la créer sur le serveur. Les opérations sur les tags doivent également être synchronisées avec le serveur grâce à git pull :\ngit push --tags Si des opérations de réécriture de l\u0026rsquo;historique ont été menées (comme un rebase), il faudra demander à Git de forcer cette réécriture sur le dépôt distant :\ngit push --force-with-lease Cette opération échouera si d\u0026rsquo;autres modifications ont été effectuées entre temps sur la branche, pour éviter tout risque de perte de code. Il existe une option --force pour réécrire l\u0026rsquo;historique sans cette sécurité. Récupérer des modifications Récupérer des modifications revient à fusionner la branche distante dans la branche locale. Cette opération s\u0026rsquo;effectue grâce à git pull :\ngit pull Si on souhaite effectuer cette fusion avec un rebase, il suffit d\u0026rsquo;ajouter l\u0026rsquo;option --rebase. Le pull est en fait l\u0026rsquo;enchaînement de deux opérations : fetch pour télécharger les modifications, puis merge pour les intégrer. Rôles et permissions Même lorsqu\u0026rsquo;un dépôt est public et peut être cloné librement, GitLab propose un système de contrôle d\u0026rsquo;accès permettant de donner des droits différenciés aux différents intervenants d\u0026rsquo;un projet. Ces paramètres se règlent à l\u0026rsquo;échelle du projet dans les options relatives aux Membres :\nOwner : Le propriétaire du projet est responsable du projet et a tous les droits sur celui-ci. Maintainer : Les mainteneurs ont les mêmes droits que le propriétaire du projet, à l\u0026rsquo;exception de la suppression du projet ou de certains éléments. Developer : Les développeurs peuvent créer des branches, effectuer des commits et des merge requests, et commenter les demandes de fusion. Par défaut, ils ne peuvent pas valider des demandes de fusion ou supprimer des branches protégées. Reporter : Les rapporteurs peuvent créer et gérer des tickets, mais ne peuvent pas effectuer de modifications sur le code source. Guest : Les invités ont un accès limité en lecture seule au projet et ne peuvent pas effectuer de modifications sur le code source. Ils peuvent être autorisés à créer des tickets. Gestion des tickets GitLab propose un système de gestion de tickets pour les évolutions fonctionnelles (Issue) et les bugs (Incidents). Les tickets peuvent ensuite être visualisés en liste, ou sur un tableau du type Kanban. Créer un ticket Un ticket peut être relié à un jalon, par exemple une itération pour un projet Scrum. Il peut également être associé à une étiquette dont la liste est définie à l\u0026rsquo;échelle du projet. Il existe deux approches courantes et complémentaires :\nPar type de ticket : amélioration, correction de bug, accessibilité\u0026hellip; Par phase de travail : spécification, développement, recette\u0026hellip; Gérer un ticket GitLab permet de décomposer un ticket en sous-tâches, mais aussi de l\u0026rsquo;associer à d\u0026rsquo;autres tickets.\nIl est également possible de créer automatiquement une branche liée au ticket, ce qui permet de le clore une fois la branche fusionnée. Des outils de gestion du temps (estimation de charge, date d\u0026rsquo;échéance) sont aussi proposés.\nBranches protégées GitLab inclut un mécanisme de protection des branches d\u0026rsquo;un dépôt.\nCette protection permet de contrôler qui peut envoyer ou fusionner du code dans certaines branches, notamment dans main. La protection peut obliger à passer par les merge requests pour modifier le code d\u0026rsquo;une branche. Il est toujours possible de faire des fusions ou des ajouts sur le dépôt local dans les branches protégées, mais les opérations de type git push seront alors systématiquement rejetées.\nMerge Requests Une merge request est une demande de fusion, c\u0026rsquo;est-à-dire que son auteur demande à ce qu\u0026rsquo;une branche (généralement celle sur laquelle il a travaillé) soit la branche source d\u0026rsquo;un git merge sur une branche cible protégée.\nSelon la configuration du dépôt, la validation de cette demande peut être soumise à approbation préalable ou à la validation de tests.\nCréer une merge request La création d\u0026rsquo;une merge request demande au développeur de préciser les branches source et cible et de décrire ses modifications.\nIl est possible de configurer une merge request pour qu\u0026rsquo;elle effectue automatiquement un squash lorsqu\u0026rsquo;elle est validée (\u0026ldquo;Écraser les commits lorsque la demande de fusion est validée\u0026rdquo;), ou pour supprimer la branche source.\nValider une merge request Lorsque le message \u0026ldquo;Ready to merge !\u0026rdquo; est visible sur une merge request, elle est prête à être validée et fusionnée.\nL\u0026rsquo;option \u0026ldquo;Delete source branch\u0026rdquo; permet de supprimer automatiquement la branche source une fois l\u0026rsquo;opération terminée Edit commit message permet de modifier le message du commit de merge, pour la lisibilité de l\u0026rsquo;historique. Une fois la validation effectuée, l\u0026rsquo;exécution de la commande git pull permet de répercuter la fusion sur le dépôt local.\n","date":"April 16, 2023","hero":"/images/default-hero.jpg","permalink":"https://maxence.collard-lagalle.me/posts/formations/git/software-forge/","summary":"Une forge logicielle est une plateforme web qui permet aux développeurs de gérer leur code source, de collaborer sur des projets de développement, de suivre les bugs et les problèmes, et de déployer des applications. Outre le suivi de version basé sur Git, les forges logicielles incluent des fonctionnalités comme la création de merge requests, la gestion de bugs, la documentation, la gestion des tâches, les tests automatisés et les déploiements continus.","tags":["Git","GitLab"],"title":"Travailler avec GitLab"}]