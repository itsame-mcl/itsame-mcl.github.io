<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on Maxence Lagalle</title><link>https://www.maxence-lagalle.fr/courses/git/</link><description>Recent content in Git on Maxence Lagalle</description><generator>Hugo -- gohugo.io</generator><language>fr-fr</language><lastBuildDate>Thu, 13 Apr 2023 07:00:00 +0100</lastBuildDate><atom:link href="https://www.maxence-lagalle.fr/courses/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Git - Diaporama</title><link>https://www.maxence-lagalle.fr/courses/git/slides/</link><pubDate>Thu, 13 Apr 2023 07:00:00 +0100</pubDate><guid>https://www.maxence-lagalle.fr/courses/git/slides/</guid><description/></item><item><title/><link>https://www.maxence-lagalle.fr/courses/git/slides/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.maxence-lagalle.fr/courses/git/slides/introduction/</guid><description>Introduction Pourquoi utiliser un système de gestion de versions ?
Système de gestion de versions ? Un système de gestion de versions (VCS) est un outil permettant de suivre les modifications apportées au code source d&amp;rsquo;un projet au fil du temps.
Son utilisation permet de :
travailler ensemble sur un même code source conserver l&amp;rsquo;historique des modifications apportées revenir à des versions précédentes résoudre les conflits entre les modifications apportées par différents développeurs Quels sont les avantages ?</description></item><item><title/><link>https://www.maxence-lagalle.fr/courses/git/slides/first-steps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.maxence-lagalle.fr/courses/git/slides/first-steps/</guid><description>Premiers pas Installation et configuration de Git
Installation de Git Linux Git est généralement installé directement dans la plupart des distributions Linux. Sinon, il est installable dans un terminal au travers du gestionnaire de paquets de la distribution : Debian : sudo apt install git-all Fedora : sudo dnf install git-all macOS Sur macOS Mavericks (10.9) ou ultérieur, Git est fourni au travers des Xcode Command Line Tools. Il suffit d&amp;rsquo;essayer de lancer Git dans un terminal via une commande comme git --version pour que macOS propose de l&amp;rsquo;installer avec d&amp;rsquo;autres outils de développement.</description></item><item><title/><link>https://www.maxence-lagalle.fr/courses/git/slides/repo-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.maxence-lagalle.fr/courses/git/slides/repo-management/</guid><description>Gérer un dépôt Git Créer un dépôt, écrire des commits, gérer des multiples branches, consulter et manipuler l&amp;rsquo;historique
Qu&amp;rsquo;est-ce qu&amp;rsquo;un dépôt ? Un dépôt (ou &amp;ldquo;repository&amp;rdquo; en anglais) est l&amp;rsquo;endroit où Git stocke l&amp;rsquo;historique des versions d&amp;rsquo;un projet de développement. Il existe deux types de dépôts dans Git : Un dépôt local est une copie du dépôt sur l&amp;rsquo;ordinateur local d&amp;rsquo;un développeur Un dépôt distant est un dépôt hébergé sur un serveur distant, accessible via Internet.</description></item><item><title/><link>https://www.maxence-lagalle.fr/courses/git/slides/software-forge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.maxence-lagalle.fr/courses/git/slides/software-forge/</guid><description>Travailler avec une forge logicielle Se synchroniser avec un dépôt distant et travailler de manière collaborative, exploiter les fonctionnalités de la forge logicielle GitLab
Forge logicielle ? Une forge logicielle est une plateforme web qui permet aux développeurs de gérer leur code source, de collaborer sur des projets de développement, de suivre les bugs et les problèmes, et de déployer des applications. Outre le suivi de version basé sur Git, les forges logicielles incluent des fonctionnalités comme la création de merge requests, la gestion de bugs, la documentation, la gestion des tâches, les tests automatisés et les déploiements continus.</description></item><item><title/><link>https://www.maxence-lagalle.fr/courses/git/slides/workflows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.maxence-lagalle.fr/courses/git/slides/workflows/</guid><description>Flux de travail usuels GitFlow, OneFlow, GitLab Flow
Flux de travail ? Un flux de travail (en anglais, workflow) est une façon standardisée d&amp;rsquo;organiser les branches d&amp;rsquo;un projet Git. Leur utilisation permet de bénéficier de méthodes éprouvées pour s&amp;rsquo;adapter à des modes usuels d&amp;rsquo;organisation et d&amp;rsquo;outils spécifiquement conçus pour leur prise en charge. GitFlow GitFlow est un flux de travail qui a été proposé par Vincent Driessen en 2010. Son objectif est de permettre en parallèle la maintenance d&amp;rsquo;une version de production et l&amp;rsquo;élaboration d&amp;rsquo;une version de développement.</description></item><item><title/><link>https://www.maxence-lagalle.fr/courses/git/slides/ci/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.maxence-lagalle.fr/courses/git/slides/ci/</guid><description>Git et l&amp;rsquo;intégration continue (CI) Introduction aux pipelines GitLab CI/CD
Intégration continue ? L&amp;rsquo;intégration continue (Continuous Integration, CI) est une pratique de développement logiciel qui consiste à tester et à construire automatiquement un projet chaque fois qu&amp;rsquo;un développeur soumet un changement dans le code source. Cette pratique vise à détecter rapidement les erreurs de code et à garantir que le code est fonctionnel et prêt à être déployé. Pipeline ?</description></item></channel></rss>