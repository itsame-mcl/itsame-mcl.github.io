<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git &amp; GitLab on Maxence Collard-Lagalle</title><link>https://maxence.collard-lagalle.me/posts/formations/git/</link><description>Recent content in Git &amp; GitLab on Maxence Collard-Lagalle</description><generator>Hugo -- gohugo.io</generator><language>fr</language><lastBuildDate>Sun, 16 Apr 2023 19:00:00 +0100</lastBuildDate><atom:link href="https://maxence.collard-lagalle.me/posts/formations/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Flux de travail usuels</title><link>https://maxence.collard-lagalle.me/posts/formations/git/workflows/</link><pubDate>Sun, 16 Apr 2023 19:00:00 +0100</pubDate><guid>https://maxence.collard-lagalle.me/posts/formations/git/workflows/</guid><description>&lt;p>Un flux de travail (en anglais, &lt;em>workflow&lt;/em>) est une façon standardisée d&amp;rsquo;organiser les branches d&amp;rsquo;un projet Git.
Leur utilisation permet de bénéficier de méthodes éprouvées pour s&amp;rsquo;adapter à des modes usuels d&amp;rsquo;organisation et d&amp;rsquo;outils spécifiquement conçus pour leur prise en charge.&lt;/p>
&lt;h2 id="gitflow">GitFlow&lt;/h2>
&lt;p>GitFlow est un flux de travail qui a été proposé par &lt;a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">Vincent Driessen&lt;/a> en 2010.
Son objectif est de permettre en parallèle la maintenance d&amp;rsquo;une version de production et l&amp;rsquo;élaboration d&amp;rsquo;une version de développement.&lt;/p></description></item><item><title>Gérer un dépôt Git</title><link>https://maxence.collard-lagalle.me/posts/formations/git/repo-management/</link><pubDate>Sun, 16 Apr 2023 19:00:00 +0100</pubDate><guid>https://maxence.collard-lagalle.me/posts/formations/git/repo-management/</guid><description>&lt;h2 id="dépôt-local">Dépôt local&lt;/h2>
&lt;p>Un &lt;strong>dépôt&lt;/strong> (ou &amp;ldquo;repository&amp;rdquo; en anglais) est l&amp;rsquo;endroit où Git stocke l&amp;rsquo;historique des versions d&amp;rsquo;un projet de développement.
Il existe deux types de dépôts dans Git :&lt;/p>
&lt;ul>
&lt;li>Un &lt;strong>dépôt local&lt;/strong> est une copie du dépôt sur l&amp;rsquo;ordinateur local d&amp;rsquo;un développeur&lt;/li>
&lt;li>Un &lt;strong>dépôt distant&lt;/strong> est un dépôt hébergé sur un serveur distant, accessible via Internet.&lt;/li>
&lt;/ul>
&lt;h3 id="créer-un-dépôt-local">Créer un dépôt local&lt;/h3>
&lt;p>Pour créer un dépôt local avec Git, il suffit de se positionner en ligne de commandes (via &lt;code>cd&lt;/code>) dans un dossier à transformer en dépôt et d&amp;rsquo;utiliser la commande :&lt;/p></description></item><item><title>Introduction</title><link>https://maxence.collard-lagalle.me/posts/formations/git/introduction/</link><pubDate>Sun, 16 Apr 2023 19:00:00 +0100</pubDate><guid>https://maxence.collard-lagalle.me/posts/formations/git/introduction/</guid><description>&lt;p>&lt;a href="https://git-scm.com/" target="_blank" rel="noopener">Git&lt;/a> a été créé par Linus Torvalds, le créateur du système d&amp;rsquo;exploitation Linux, en 2005.
Il a été conçu pour être un VCS décentralisé, capable de gérer efficacement les grands projets open source tels que le développement du noyau Linux.
Git a rapidement gagné en popularité auprès de la communauté du développement de logiciels en raison de sa rapidité, de sa facilité d&amp;rsquo;utilisation et de sa flexibilité.&lt;/p>
&lt;p>Git, en tant que VCS décentralisé (ou distribué), permet à chaque développeur de disposer d&amp;rsquo;une copie complète de l&amp;rsquo;historique des modifications et du code source sur leur ordinateur.
Ils peuvent dont travailler en mode déconnecté (sans accès à Internet ou à un serveur centralisé) et ont accès à toutes les versions du code source.
Cela signifie qu&amp;rsquo;&lt;strong>il n&amp;rsquo;y a pas de point unique de défaillance&lt;/strong>, car le référentiel de code est distribué sur plusieurs machines.&lt;/p></description></item><item><title>Introduction à GitLab CI</title><link>https://maxence.collard-lagalle.me/posts/formations/git/gitlab-ci/</link><pubDate>Sun, 16 Apr 2023 19:00:00 +0100</pubDate><guid>https://maxence.collard-lagalle.me/posts/formations/git/gitlab-ci/</guid><description>&lt;p>L&amp;rsquo;intégration continue (&lt;em>Continuous Integration, CI&lt;/em>) est une pratique de développement logiciel qui consiste à tester et à construire automatiquement un projet chaque fois qu&amp;rsquo;un développeur soumet un changement dans le code source.
Cette pratique vise à détecter rapidement les erreurs de code et à garantir que le code est fonctionnel et prêt à être déployé.&lt;/p>
&lt;p>Un &lt;strong>pipeline&lt;/strong> d&amp;rsquo;intégration continue est un processus automatisé qui permet de construire, tester et déployer un projet.
Il s&amp;rsquo;agit d&amp;rsquo;une série d&amp;rsquo;étapes configurées pour être exécutées automatiquement par un &lt;code>runner&lt;/code> lorsque des événements surviennent un dépôt (comme un commit).&lt;/p></description></item><item><title>Premiers pas</title><link>https://maxence.collard-lagalle.me/posts/formations/git/first-steps/</link><pubDate>Sun, 16 Apr 2023 19:00:00 +0100</pubDate><guid>https://maxence.collard-lagalle.me/posts/formations/git/first-steps/</guid><description>&lt;h2 id="installation-de-git">Installation de Git&lt;/h2>
&lt;h3 id="linux">Linux&lt;/h3>
&lt;p>Git est généralement installé directement dans la plupart des distributions Linux.
Sinon, il est installable dans un terminal au travers du gestionnaire de paquets de la distribution :&lt;/p>
&lt;ul>
&lt;li>Debian : &lt;code>sudo apt install git-all&lt;/code>&lt;/li>
&lt;li>Fedora : &lt;code>sudo dnf install git-all&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="macos">macOS&lt;/h3>
&lt;p>Sur macOS Mavericks (10.9) ou ultérieur, Git est fourni au travers des Xcode Command Line Tools.
Il suffit d&amp;rsquo;essayer de lancer Git dans un terminal via une commande comme &lt;code>git --version&lt;/code> pour que macOS propose de l&amp;rsquo;installer avec d&amp;rsquo;autres outils de développement.
Sinon, il est possible d&amp;rsquo;utiliser &lt;a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew&lt;/a> via &lt;code>brew install git&lt;/code> ou de &lt;a href="https://git-scm.com/download/mac" target="_blank" rel="noopener">télécharger l&amp;rsquo;installateur&lt;/a>.&lt;/p></description></item><item><title>Travailler avec GitLab</title><link>https://maxence.collard-lagalle.me/posts/formations/git/software-forge/</link><pubDate>Sun, 16 Apr 2023 19:00:00 +0100</pubDate><guid>https://maxence.collard-lagalle.me/posts/formations/git/software-forge/</guid><description>&lt;p>Une forge logicielle est une plateforme web qui permet aux développeurs de gérer leur code source, de collaborer sur des projets de développement, de suivre les bugs et les problèmes, et de déployer des applications.
Outre le suivi de version basé sur Git, les forges logicielles incluent des fonctionnalités comme la création de merge requests, la gestion de bugs, la documentation, la gestion des tâches, les tests automatisés et les déploiements continus.&lt;/p></description></item></channel></rss>